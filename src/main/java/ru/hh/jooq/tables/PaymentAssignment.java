/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.PaymentAssignmentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentAssignment extends TableImpl<PaymentAssignmentRecord> {

    private static final long serialVersionUID = -923782361;

    /**
     * The reference instance of <code>public.payment_assignment</code>
     */
    public static final PaymentAssignment PAYMENT_ASSIGNMENT = new PaymentAssignment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentAssignmentRecord> getRecordType() {
        return PaymentAssignmentRecord.class;
    }

    /**
     * The column <code>public.payment_assignment.payment_assignment_id</code>.
     */
    public final TableField<PaymentAssignmentRecord, Integer> PAYMENT_ASSIGNMENT_ID = createField("payment_assignment_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('payment_assignment_payment_assignment_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.payment_assignment.payment_id</code>.
     */
    public final TableField<PaymentAssignmentRecord, Integer> PAYMENT_ID = createField("payment_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payment_assignment.user_id</code>.
     */
    public final TableField<PaymentAssignmentRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payment_assignment.share</code>.
     */
    public final TableField<PaymentAssignmentRecord, Integer> SHARE = createField("share", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payment_assignment.is_responsible</code>.
     */
    public final TableField<PaymentAssignmentRecord, Boolean> IS_RESPONSIBLE = createField("is_responsible", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.payment_assignment</code> table reference
     */
    public PaymentAssignment() {
        this("payment_assignment", null);
    }

    /**
     * Create an aliased <code>public.payment_assignment</code> table reference
     */
    public PaymentAssignment(String alias) {
        this(alias, PAYMENT_ASSIGNMENT);
    }

    private PaymentAssignment(String alias, Table<PaymentAssignmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentAssignment(String alias, Table<PaymentAssignmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PaymentAssignmentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PAYMENT_ASSIGNMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PaymentAssignmentRecord> getPrimaryKey() {
        return Keys.PAYMENT_ASSIGNMENT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PaymentAssignmentRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentAssignmentRecord>>asList(Keys.PAYMENT_ASSIGNMENT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PaymentAssignmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PaymentAssignmentRecord, ?>>asList(Keys.PAYMENT_ASSIGNMENT__PAYMENT_ASSIGNMENT_IBFK_1, Keys.PAYMENT_ASSIGNMENT__PAYMENT_ASSIGNMENT_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PaymentAssignment as(String alias) {
        return new PaymentAssignment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentAssignment rename(String name) {
        return new PaymentAssignment(name, null);
    }
}
