/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.AccountServiceEventRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountServiceEvent extends TableImpl<AccountServiceEventRecord> {

    private static final long serialVersionUID = -102213309;

    /**
     * The reference instance of <code>public.account_service_event</code>
     */
    public static final AccountServiceEvent ACCOUNT_SERVICE_EVENT = new AccountServiceEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountServiceEventRecord> getRecordType() {
        return AccountServiceEventRecord.class;
    }

    /**
     * The column <code>public.account_service_event.id</code>.
     */
    public final TableField<AccountServiceEventRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('account_service_event_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.account_service_event.items_count</code>.
     */
    public final TableField<AccountServiceEventRecord, Integer> ITEMS_COUNT = createField("items_count", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.account_service_event.event_date</code>.
     */
    public final TableField<AccountServiceEventRecord, LocalDateTime> EVENT_DATE = createField("event_date", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.account_service_event.fake</code>.
     */
    public final TableField<AccountServiceEventRecord, Boolean> FAKE = createField("fake", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.account_service_event.object_id</code>.
     */
    public final TableField<AccountServiceEventRecord, Integer> OBJECT_ID = createField("object_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.account_service_event.type</code>.
     */
    public final TableField<AccountServiceEventRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.account_service_event.account_service_package_entry_id</code>.
     */
    public final TableField<AccountServiceEventRecord, Integer> ACCOUNT_SERVICE_PACKAGE_ENTRY_ID = createField("account_service_package_entry_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.account_service_event.employer_manager_id</code>.
     */
    public final TableField<AccountServiceEventRecord, Integer> EMPLOYER_MANAGER_ID = createField("employer_manager_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.account_service_event.vacancy_publication</code>.
     */
    public final TableField<AccountServiceEventRecord, Boolean> VACANCY_PUBLICATION = createField("vacancy_publication", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.account_service_event.ticket_uid</code>.
     */
    public final TableField<AccountServiceEventRecord, Long> TICKET_UID = createField("ticket_uid", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.account_service_event</code> table reference
     */
    public AccountServiceEvent() {
        this("account_service_event", null);
    }

    /**
     * Create an aliased <code>public.account_service_event</code> table reference
     */
    public AccountServiceEvent(String alias) {
        this(alias, ACCOUNT_SERVICE_EVENT);
    }

    private AccountServiceEvent(String alias, Table<AccountServiceEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountServiceEvent(String alias, Table<AccountServiceEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountServiceEventRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_SERVICE_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountServiceEventRecord> getPrimaryKey() {
        return Keys.ACCOUNT_SERVICE_EVENT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountServiceEventRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountServiceEventRecord>>asList(Keys.ACCOUNT_SERVICE_EVENT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AccountServiceEventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountServiceEventRecord, ?>>asList(Keys.ACCOUNT_SERVICE_EVENT__FK93B89FEADCD0ECC, Keys.ACCOUNT_SERVICE_EVENT__ACCOUNT_SERVICE_EVENT_TICKET_UID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountServiceEvent as(String alias) {
        return new AccountServiceEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountServiceEvent rename(String name) {
        return new AccountServiceEvent(name, null);
    }
}
