/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.PriceRegionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PriceRegion extends TableImpl<PriceRegionRecord> {

    private static final long serialVersionUID = -1478883619;

    /**
     * The reference instance of <code>public.price_region</code>
     */
    public static final PriceRegion PRICE_REGION = new PriceRegion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PriceRegionRecord> getRecordType() {
        return PriceRegionRecord.class;
    }

    /**
     * The column <code>public.price_region.id</code>.
     */
    public final TableField<PriceRegionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('price_region_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.price_region.country_area_id</code>.
     */
    public final TableField<PriceRegionRecord, Integer> COUNTRY_AREA_ID = createField("country_area_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.price_region.price_rate</code>.
     */
    public final TableField<PriceRegionRecord, BigDecimal> PRICE_RATE = createField("price_rate", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.price_region.price_rate_for_favpp</code>.
     */
    public final TableField<PriceRegionRecord, BigDecimal> PRICE_RATE_FOR_FAVPP = createField("price_rate_for_favpp", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.price_region.visible</code>.
     */
    public final TableField<PriceRegionRecord, Boolean> VISIBLE = createField("visible", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.price_region.parent_id</code>.
     */
    public final TableField<PriceRegionRecord, Integer> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.price_region.prof_areas</code>. unused
     */
    public final TableField<PriceRegionRecord, Boolean> PROF_AREAS = createField("prof_areas", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "unused");

    /**
     * The column <code>public.price_region.vpp</code>. unused
     */
    public final TableField<PriceRegionRecord, Boolean> VPP = createField("vpp", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "unused");

    /**
     * The column <code>public.price_region.leaf</code>.
     */
    public final TableField<PriceRegionRecord, Boolean> LEAF = createField("leaf", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.price_region.geo</code>.
     */
    public final TableField<PriceRegionRecord, Boolean> GEO = createField("geo", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.price_region.advice</code>.
     */
    public final TableField<PriceRegionRecord, Boolean> ADVICE = createField("advice", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.price_region.legacy</code>.
     */
    public final TableField<PriceRegionRecord, Boolean> LEGACY = createField("legacy", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.price_region.no_price</code>.
     */
    public final TableField<PriceRegionRecord, Boolean> NO_PRICE = createField("no_price", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.price_region.prof_areas_</code>. unused
     */
    public final TableField<PriceRegionRecord, Boolean> PROF_AREAS_ = createField("prof_areas_", org.jooq.impl.SQLDataType.BOOLEAN, this, "unused");

    /**
     * The column <code>public.price_region.pre_legacy</code>.
     */
    public final TableField<PriceRegionRecord, Boolean> PRE_LEGACY = createField("pre_legacy", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.price_region.region_order</code>.
     */
    public final TableField<PriceRegionRecord, BigDecimal> REGION_ORDER = createField("region_order", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 2).nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.price_region.prof_areas_fa</code>. Determines the availability of FA services for purchase in this region depending on the selected professional areas
     */
    public final TableField<PriceRegionRecord, Integer> PROF_AREAS_FA = createField("prof_areas_fa", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("3", org.jooq.impl.SQLDataType.INTEGER)), this, "Determines the availability of FA services for purchase in this region depending on the selected professional areas");

    /**
     * The column <code>public.price_region.prof_areas_fa_vpp</code>. Determines the availability of FA+VPP services for purchase in this region depending on the selected professional areas
     */
    public final TableField<PriceRegionRecord, Integer> PROF_AREAS_FA_VPP = createField("prof_areas_fa_vpp", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("3", org.jooq.impl.SQLDataType.INTEGER)), this, "Determines the availability of FA+VPP services for purchase in this region depending on the selected professional areas");

    /**
     * The column <code>public.price_region.prof_areas_fa_vppl</code>.
     */
    public final TableField<PriceRegionRecord, Integer> PROF_AREAS_FA_VPPL = createField("prof_areas_fa_vppl", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("3", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.price_region</code> table reference
     */
    public PriceRegion() {
        this("price_region", null);
    }

    /**
     * Create an aliased <code>public.price_region</code> table reference
     */
    public PriceRegion(String alias) {
        this(alias, PRICE_REGION);
    }

    private PriceRegion(String alias, Table<PriceRegionRecord> aliased) {
        this(alias, aliased, null);
    }

    private PriceRegion(String alias, Table<PriceRegionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PriceRegionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRICE_REGION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PriceRegionRecord> getPrimaryKey() {
        return Keys.PRICE_REGION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PriceRegionRecord>> getKeys() {
        return Arrays.<UniqueKey<PriceRegionRecord>>asList(Keys.PRICE_REGION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PriceRegionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PriceRegionRecord, ?>>asList(Keys.PRICE_REGION__PARENT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PriceRegion as(String alias) {
        return new PriceRegion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PriceRegion rename(String name) {
        return new PriceRegion(name, null);
    }
}
