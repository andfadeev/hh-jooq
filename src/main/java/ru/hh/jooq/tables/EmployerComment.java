/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.EmployerCommentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployerComment extends TableImpl<EmployerCommentRecord> {

    private static final long serialVersionUID = 1911337970;

    /**
     * The reference instance of <code>public.employer_comment</code>
     */
    public static final EmployerComment EMPLOYER_COMMENT = new EmployerComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployerCommentRecord> getRecordType() {
        return EmployerCommentRecord.class;
    }

    /**
     * The column <code>public.employer_comment.employer_comment_id</code>.
     */
    public final TableField<EmployerCommentRecord, Integer> EMPLOYER_COMMENT_ID = createField("employer_comment_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('employer_comment_employer_comment_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.employer_comment.employer_id</code>.
     */
    public final TableField<EmployerCommentRecord, Integer> EMPLOYER_ID = createField("employer_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.employer_comment.creation_time</code>.
     */
    public final TableField<EmployerCommentRecord, LocalDateTime> CREATION_TIME = createField("creation_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("'1970-01-01 00:00:00'::timestamp without time zone", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.employer_comment.user_id</code>.
     */
    public final TableField<EmployerCommentRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.employer_comment.comment</code>.
     */
    public final TableField<EmployerCommentRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.employer_comment.is_indexed</code>.
     */
    public final TableField<EmployerCommentRecord, Integer> IS_INDEXED = createField("is_indexed", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.employer_comment</code> table reference
     */
    public EmployerComment() {
        this("employer_comment", null);
    }

    /**
     * Create an aliased <code>public.employer_comment</code> table reference
     */
    public EmployerComment(String alias) {
        this(alias, EMPLOYER_COMMENT);
    }

    private EmployerComment(String alias, Table<EmployerCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployerComment(String alias, Table<EmployerCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EmployerCommentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EMPLOYER_COMMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployerCommentRecord> getPrimaryKey() {
        return Keys.EMPLOYER_COMMENT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployerCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployerCommentRecord>>asList(Keys.EMPLOYER_COMMENT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EmployerCommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployerCommentRecord, ?>>asList(Keys.EMPLOYER_COMMENT__EMPLOYER_ID_FKEY, Keys.EMPLOYER_COMMENT__USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployerComment as(String alias) {
        return new EmployerComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployerComment rename(String name) {
        return new EmployerComment(name, null);
    }
}
