/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.MappingRecord;


/**
 * Группировка вакансий поверх уже определенных группировок по департаментам, 
 * регионам и классификаторам. Перенесено из схемы hhservice.hhemployer по 
 * задаче HH-38267
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mapping extends TableImpl<MappingRecord> {

    private static final long serialVersionUID = 286612967;

    /**
     * The reference instance of <code>public.mapping</code>
     */
    public static final Mapping MAPPING = new Mapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MappingRecord> getRecordType() {
        return MappingRecord.class;
    }

    /**
     * The column <code>public.mapping.holding_code</code>.
     */
    public final TableField<MappingRecord, String> HOLDING_CODE = createField("holding_code", org.jooq.impl.SQLDataType.VARCHAR.length(16).nullable(false), this, "");

    /**
     * The column <code>public.mapping.employer_id</code>.
     */
    public final TableField<MappingRecord, Integer> EMPLOYER_ID = createField("employer_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mapping.grouping_value</code>.
     */
    public final TableField<MappingRecord, String> GROUPING_VALUE = createField("grouping_value", org.jooq.impl.SQLDataType.VARCHAR.length(16).nullable(false), this, "");

    /**
     * The column <code>public.mapping.new_grouping_value</code>.
     */
    public final TableField<MappingRecord, String> NEW_GROUPING_VALUE = createField("new_grouping_value", org.jooq.impl.SQLDataType.VARCHAR.length(16).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.mapping.new_grouping_type</code>.
     */
    public final TableField<MappingRecord, String> NEW_GROUPING_TYPE = createField("new_grouping_type", org.jooq.impl.SQLDataType.VARCHAR.length(3).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.mapping.new_grouping_code</code>.
     */
    public final TableField<MappingRecord, String> NEW_GROUPING_CODE = createField("new_grouping_code", org.jooq.impl.SQLDataType.VARCHAR.length(3).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.mapping.id</code>.
     */
    public final TableField<MappingRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mapping_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.mapping</code> table reference
     */
    public Mapping() {
        this("mapping", null);
    }

    /**
     * Create an aliased <code>public.mapping</code> table reference
     */
    public Mapping(String alias) {
        this(alias, MAPPING);
    }

    private Mapping(String alias, Table<MappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mapping(String alias, Table<MappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Группировка вакансий поверх уже определенных группировок по департаментам, регионам и классификаторам. Перенесено из схемы hhservice.hhemployer по задаче HH-38267");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MappingRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MAPPING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MappingRecord> getPrimaryKey() {
        return Keys.MAPPING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MappingRecord>> getKeys() {
        return Arrays.<UniqueKey<MappingRecord>>asList(Keys.MAPPING_HOLDING_CODE_KEY, Keys.MAPPING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MappingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MappingRecord, ?>>asList(Keys.MAPPING__MAPPING_EMPLOYER_ID_FKEY, Keys.MAPPING__MAPPING_HOLDING_CODE_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mapping as(String alias) {
        return new Mapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mapping rename(String name) {
        return new Mapping(name, null);
    }
}
