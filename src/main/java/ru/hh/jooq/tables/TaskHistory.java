/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.TaskHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskHistory extends TableImpl<TaskHistoryRecord> {

    private static final long serialVersionUID = 1250269168;

    /**
     * The reference instance of <code>public.task_history</code>
     */
    public static final TaskHistory TASK_HISTORY = new TaskHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskHistoryRecord> getRecordType() {
        return TaskHistoryRecord.class;
    }

    /**
     * The column <code>public.task_history.task_history_id</code>.
     */
    public final TableField<TaskHistoryRecord, Integer> TASK_HISTORY_ID = createField("task_history_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('task_history_task_history_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.task_history.creation_time</code>.
     */
    public final TableField<TaskHistoryRecord, LocalDateTime> CREATION_TIME = createField("creation_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.task_history.action</code>.
     */
    public final TableField<TaskHistoryRecord, Integer> ACTION = createField("action", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.task_history.information</code>.
     */
    public final TableField<TaskHistoryRecord, String> INFORMATION = createField("information", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.task_history.task_info_id</code>.
     */
    public final TableField<TaskHistoryRecord, Integer> TASK_INFO_ID = createField("task_info_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.task_history.host</code>.
     */
    public final TableField<TaskHistoryRecord, String> HOST = createField("host", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * Create a <code>public.task_history</code> table reference
     */
    public TaskHistory() {
        this("task_history", null);
    }

    /**
     * Create an aliased <code>public.task_history</code> table reference
     */
    public TaskHistory(String alias) {
        this(alias, TASK_HISTORY);
    }

    private TaskHistory(String alias, Table<TaskHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskHistory(String alias, Table<TaskHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TaskHistoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TASK_HISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TaskHistoryRecord> getPrimaryKey() {
        return Keys.TASK_HISTORY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TaskHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskHistoryRecord>>asList(Keys.TASK_HISTORY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TaskHistoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TaskHistoryRecord, ?>>asList(Keys.TASK_HISTORY__TASK_HISTORY_TASK_INFO_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskHistory as(String alias) {
        return new TaskHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskHistory rename(String name) {
        return new TaskHistory(name, null);
    }
}
