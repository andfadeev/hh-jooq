/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.ExperienceRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Experience extends TableImpl<ExperienceRecord> {

    private static final long serialVersionUID = 1811044262;

    /**
     * The reference instance of <code>public.experience</code>
     */
    public static final Experience EXPERIENCE = new Experience();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExperienceRecord> getRecordType() {
        return ExperienceRecord.class;
    }

    /**
     * The column <code>public.experience.experience_id</code>.
     */
    public final TableField<ExperienceRecord, Integer> EXPERIENCE_ID = createField("experience_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('experience_experience_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.experience.resume_id</code>.
     */
    public final TableField<ExperienceRecord, Integer> RESUME_ID = createField("resume_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.experience.start_date</code>.
     */
    public final TableField<ExperienceRecord, LocalDateTime> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.experience.end_date</code>.
     */
    public final TableField<ExperienceRecord, LocalDateTime> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.experience.organization</code>.
     */
    public final TableField<ExperienceRecord, String> ORGANIZATION = createField("organization", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.experience.description</code>.
     */
    public final TableField<ExperienceRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.experience.post</code>.
     */
    public final TableField<ExperienceRecord, String> POST = createField("post", org.jooq.impl.SQLDataType.VARCHAR.length(512).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.experience.industry_id</code>.
     */
    public final TableField<ExperienceRecord, Integer> INDUSTRY_ID = createField("industry_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.experience.company_url</code>.
     */
    public final TableField<ExperienceRecord, String> COMPANY_URL = createField("company_url", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.experience.company_area_id</code>.
     */
    public final TableField<ExperienceRecord, Integer> COMPANY_AREA_ID = createField("company_area_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.experience.company_synonym_id</code>.
     */
    public final TableField<ExperienceRecord, Integer> COMPANY_SYNONYM_ID = createField("company_synonym_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.experience.company_id</code>.
     */
    public final TableField<ExperienceRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.experience.mapped_company_id</code>.
     */
    public final TableField<ExperienceRecord, Integer> MAPPED_COMPANY_ID = createField("mapped_company_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.experience.mapping_status</code>.
     */
    public final TableField<ExperienceRecord, Integer> MAPPING_STATUS = createField("mapping_status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.experience</code> table reference
     */
    public Experience() {
        this("experience", null);
    }

    /**
     * Create an aliased <code>public.experience</code> table reference
     */
    public Experience(String alias) {
        this(alias, EXPERIENCE);
    }

    private Experience(String alias, Table<ExperienceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Experience(String alias, Table<ExperienceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExperienceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EXPERIENCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExperienceRecord> getPrimaryKey() {
        return Keys.EXPERIENCE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExperienceRecord>> getKeys() {
        return Arrays.<UniqueKey<ExperienceRecord>>asList(Keys.EXPERIENCE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ExperienceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExperienceRecord, ?>>asList(Keys.EXPERIENCE__EXPERIENCE_INDUSTRY_FK, Keys.EXPERIENCE__EXPERIENCE_COMPANY_AREA_FK, Keys.EXPERIENCE__EXPERIENCE_COMPANY_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Experience as(String alias) {
        return new Experience(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Experience rename(String name) {
        return new Experience(name, null);
    }
}
