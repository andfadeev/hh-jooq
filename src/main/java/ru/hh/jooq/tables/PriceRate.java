/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.PriceRateRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PriceRate extends TableImpl<PriceRateRecord> {

    private static final long serialVersionUID = -743934162;

    /**
     * The reference instance of <code>public.price_rate</code>
     */
    public static final PriceRate PRICE_RATE = new PriceRate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PriceRateRecord> getRecordType() {
        return PriceRateRecord.class;
    }

    /**
     * The column <code>public.price_rate.price</code>.
     */
    public final TableField<PriceRateRecord, Long> PRICE = createField("price", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.price_rate.rate</code>.
     */
    public final TableField<PriceRateRecord, BigDecimal> RATE = createField("rate", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 8).defaultValue(org.jooq.impl.DSL.field("NULL::numeric", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.price_rate.price_rate_id</code>.
     */
    public final TableField<PriceRateRecord, Integer> PRICE_RATE_ID = createField("price_rate_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('price_rate_price_rate_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.price_rate.currency</code>.
     */
    public final TableField<PriceRateRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.CHAR.length(3).nullable(false).defaultValue(org.jooq.impl.DSL.field("'RUR'::bpchar", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>public.price_rate</code> table reference
     */
    public PriceRate() {
        this("price_rate", null);
    }

    /**
     * Create an aliased <code>public.price_rate</code> table reference
     */
    public PriceRate(String alias) {
        this(alias, PRICE_RATE);
    }

    private PriceRate(String alias, Table<PriceRateRecord> aliased) {
        this(alias, aliased, null);
    }

    private PriceRate(String alias, Table<PriceRateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PriceRateRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRICE_RATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PriceRateRecord> getPrimaryKey() {
        return Keys.PRICE_RATE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PriceRateRecord>> getKeys() {
        return Arrays.<UniqueKey<PriceRateRecord>>asList(Keys.PRICE_RATE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PriceRateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PriceRateRecord, ?>>asList(Keys.PRICE_RATE__PRICE_RATE_CURRENCY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PriceRate as(String alias) {
        return new PriceRate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PriceRate rename(String name) {
        return new PriceRate(name, null);
    }
}
