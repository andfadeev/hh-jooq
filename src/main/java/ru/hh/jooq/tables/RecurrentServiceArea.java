/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.RecurrentServiceAreaRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecurrentServiceArea extends TableImpl<RecurrentServiceAreaRecord> {

    private static final long serialVersionUID = -1187797402;

    /**
     * The reference instance of <code>public.recurrent_service_area</code>
     */
    public static final RecurrentServiceArea RECURRENT_SERVICE_AREA = new RecurrentServiceArea();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecurrentServiceAreaRecord> getRecordType() {
        return RecurrentServiceAreaRecord.class;
    }

    /**
     * The column <code>public.recurrent_service_area.recurrent_service_area_id</code>.
     */
    public final TableField<RecurrentServiceAreaRecord, Integer> RECURRENT_SERVICE_AREA_ID = createField("recurrent_service_area_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('recurrent_service_area_recurrent_service_area_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.recurrent_service_area.recurrent_service_id</code>.
     */
    public final TableField<RecurrentServiceAreaRecord, Integer> RECURRENT_SERVICE_ID = createField("recurrent_service_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.recurrent_service_area.area_id</code>.
     */
    public final TableField<RecurrentServiceAreaRecord, Integer> AREA_ID = createField("area_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.recurrent_service_area.index_</code>.
     */
    public final TableField<RecurrentServiceAreaRecord, Integer> INDEX_ = createField("index_", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.recurrent_service_area</code> table reference
     */
    public RecurrentServiceArea() {
        this("recurrent_service_area", null);
    }

    /**
     * Create an aliased <code>public.recurrent_service_area</code> table reference
     */
    public RecurrentServiceArea(String alias) {
        this(alias, RECURRENT_SERVICE_AREA);
    }

    private RecurrentServiceArea(String alias, Table<RecurrentServiceAreaRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecurrentServiceArea(String alias, Table<RecurrentServiceAreaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RecurrentServiceAreaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RECURRENT_SERVICE_AREA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RecurrentServiceAreaRecord> getPrimaryKey() {
        return Keys.RECURRENT_SERVICE_AREA_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RecurrentServiceAreaRecord>> getKeys() {
        return Arrays.<UniqueKey<RecurrentServiceAreaRecord>>asList(Keys.RECURRENT_SERVICE_AREA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RecurrentServiceAreaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RecurrentServiceAreaRecord, ?>>asList(Keys.RECURRENT_SERVICE_AREA__RECURRENT_SERVICE_AREA_RECURRENT_SERVICE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RecurrentServiceArea as(String alias) {
        return new RecurrentServiceArea(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurrentServiceArea rename(String name) {
        return new RecurrentServiceArea(name, null);
    }
}
