/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.BankRecord;


/**
 * Recurrent Service Area Scope availability
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bank extends TableImpl<BankRecord> {

    private static final long serialVersionUID = 1586288599;

    /**
     * The reference instance of <code>public.bank</code>
     */
    public static final Bank BANK = new Bank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankRecord> getRecordType() {
        return BankRecord.class;
    }

    /**
     * The column <code>public.bank.bank_id</code>.
     */
    public final TableField<BankRecord, Integer> BANK_ID = createField("bank_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('bank_bank_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.bank.label</code>.
     */
    public final TableField<BankRecord, String> LABEL = createField("label", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>public.bank.code</code>.
     */
    public final TableField<BankRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>public.bank.parser_class</code>.
     */
    public final TableField<BankRecord, String> PARSER_CLASS = createField("parser_class", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * Create a <code>public.bank</code> table reference
     */
    public Bank() {
        this("bank", null);
    }

    /**
     * Create an aliased <code>public.bank</code> table reference
     */
    public Bank(String alias) {
        this(alias, BANK);
    }

    private Bank(String alias, Table<BankRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bank(String alias, Table<BankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Recurrent Service Area Scope availability");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BankRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BANK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BankRecord> getPrimaryKey() {
        return Keys.BANK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BankRecord>> getKeys() {
        return Arrays.<UniqueKey<BankRecord>>asList(Keys.BANK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bank as(String alias) {
        return new Bank(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(String name) {
        return new Bank(name, null);
    }
}
