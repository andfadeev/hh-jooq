/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.AccountServiceTicketRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountServiceTicket extends TableImpl<AccountServiceTicketRecord> {

    private static final long serialVersionUID = 1759988950;

    /**
     * The reference instance of <code>public.account_service_ticket</code>
     */
    public static final AccountServiceTicket ACCOUNT_SERVICE_TICKET = new AccountServiceTicket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountServiceTicketRecord> getRecordType() {
        return AccountServiceTicketRecord.class;
    }

    /**
     * The column <code>public.account_service_ticket.uid</code>.
     */
    public final TableField<AccountServiceTicketRecord, Long> UID = createField("uid", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('account_service_ticket_uid_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.account_service_ticket.service_service_item_id</code>.
     */
    public final TableField<AccountServiceTicketRecord, Integer> SERVICE_SERVICE_ITEM_ID = createField("service_service_item_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.account_service_ticket.account_id</code>.
     */
    public final TableField<AccountServiceTicketRecord, Integer> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.account_service_ticket.used</code>.
     */
    public final TableField<AccountServiceTicketRecord, Boolean> USED = createField("used", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.account_service_ticket.version_</code>.
     */
    public final TableField<AccountServiceTicketRecord, Integer> VERSION_ = createField("version_", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.account_service_ticket.restored</code>.
     */
    public final TableField<AccountServiceTicketRecord, Boolean> RESTORED = createField("restored", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.account_service_ticket.state</code>.
     */
    public final TableField<AccountServiceTicketRecord, Short> STATE = createField("state", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.account_service_ticket.bonused</code>.
     */
    public final TableField<AccountServiceTicketRecord, Boolean> BONUSED = createField("bonused", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.account_service_ticket</code> table reference
     */
    public AccountServiceTicket() {
        this("account_service_ticket", null);
    }

    /**
     * Create an aliased <code>public.account_service_ticket</code> table reference
     */
    public AccountServiceTicket(String alias) {
        this(alias, ACCOUNT_SERVICE_TICKET);
    }

    private AccountServiceTicket(String alias, Table<AccountServiceTicketRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountServiceTicket(String alias, Table<AccountServiceTicketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountServiceTicketRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_SERVICE_TICKET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountServiceTicketRecord> getPrimaryKey() {
        return Keys.ACCOUNT_SERVICE_TICKET_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountServiceTicketRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountServiceTicketRecord>>asList(Keys.ACCOUNT_SERVICE_TICKET_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AccountServiceTicketRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountServiceTicketRecord, ?>>asList(Keys.ACCOUNT_SERVICE_TICKET__FK37164028FD82898A, Keys.ACCOUNT_SERVICE_TICKET__FK37164028FD82898B);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountServiceTicket as(String alias) {
        return new AccountServiceTicket(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountServiceTicket rename(String name) {
        return new AccountServiceTicket(name, null);
    }
}
