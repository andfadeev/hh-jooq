/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.SpecialtyRecord;


/**
 * HH-37878 Create education specialties relation
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Specialty extends TableImpl<SpecialtyRecord> {

    private static final long serialVersionUID = 2015200769;

    /**
     * The reference instance of <code>public.specialty</code>
     */
    public static final Specialty SPECIALTY = new Specialty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpecialtyRecord> getRecordType() {
        return SpecialtyRecord.class;
    }

    /**
     * The column <code>public.specialty.specialty_id</code>.
     */
    public final TableField<SpecialtyRecord, Integer> SPECIALTY_ID = createField("specialty_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('specialty_specialty_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.specialty.original_id</code>.
     */
    public final TableField<SpecialtyRecord, Integer> ORIGINAL_ID = createField("original_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.specialty.parent_id</code>.
     */
    public final TableField<SpecialtyRecord, Integer> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.specialty.qualification_code</code>.
     */
    public final TableField<SpecialtyRecord, Integer> QUALIFICATION_CODE = createField("qualification_code", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.specialty</code> table reference
     */
    public Specialty() {
        this("specialty", null);
    }

    /**
     * Create an aliased <code>public.specialty</code> table reference
     */
    public Specialty(String alias) {
        this(alias, SPECIALTY);
    }

    private Specialty(String alias, Table<SpecialtyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Specialty(String alias, Table<SpecialtyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "HH-37878 Create education specialties relation");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SpecialtyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SPECIALTY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SpecialtyRecord> getPrimaryKey() {
        return Keys.SPECIALTY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SpecialtyRecord>> getKeys() {
        return Arrays.<UniqueKey<SpecialtyRecord>>asList(Keys.SPECIALTY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SpecialtyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SpecialtyRecord, ?>>asList(Keys.SPECIALTY__SPECIALTY_PARENT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Specialty as(String alias) {
        return new Specialty(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Specialty rename(String name) {
        return new Specialty(name, null);
    }
}
