/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.BdzpRegionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BdzpRegion extends TableImpl<BdzpRegionRecord> {

    private static final long serialVersionUID = 1243018301;

    /**
     * The reference instance of <code>public.bdzp_region</code>
     */
    public static final BdzpRegion BDZP_REGION = new BdzpRegion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BdzpRegionRecord> getRecordType() {
        return BdzpRegionRecord.class;
    }

    /**
     * The column <code>public.bdzp_region.bdzp_region_id</code>.
     */
    public final TableField<BdzpRegionRecord, Integer> BDZP_REGION_ID = createField("bdzp_region_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.bdzp_region.provisional_data</code>.
     */
    public final TableField<BdzpRegionRecord, String> PROVISIONAL_DATA = createField("provisional_data", org.jooq.impl.SQLDataType.VARCHAR.length(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.bdzp_region.parent_id</code>. HH-54920 parent_id foreign key
     */
    public final TableField<BdzpRegionRecord, Integer> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.INTEGER, this, "HH-54920 parent_id foreign key");

    /**
     * Create a <code>public.bdzp_region</code> table reference
     */
    public BdzpRegion() {
        this("bdzp_region", null);
    }

    /**
     * Create an aliased <code>public.bdzp_region</code> table reference
     */
    public BdzpRegion(String alias) {
        this(alias, BDZP_REGION);
    }

    private BdzpRegion(String alias, Table<BdzpRegionRecord> aliased) {
        this(alias, aliased, null);
    }

    private BdzpRegion(String alias, Table<BdzpRegionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BdzpRegionRecord> getPrimaryKey() {
        return Keys.BDZP_REGION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BdzpRegionRecord>> getKeys() {
        return Arrays.<UniqueKey<BdzpRegionRecord>>asList(Keys.BDZP_REGION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BdzpRegionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BdzpRegionRecord, ?>>asList(Keys.BDZP_REGION__BDZP_REGION_PARENT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BdzpRegion as(String alias) {
        return new BdzpRegion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BdzpRegion rename(String name) {
        return new BdzpRegion(name, null);
    }
}
