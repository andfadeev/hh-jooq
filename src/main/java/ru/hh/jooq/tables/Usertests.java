/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.UsertestsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usertests extends TableImpl<UsertestsRecord> {

    private static final long serialVersionUID = -240100083;

    /**
     * The reference instance of <code>public.usertests</code>
     */
    public static final Usertests USERTESTS = new Usertests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsertestsRecord> getRecordType() {
        return UsertestsRecord.class;
    }

    /**
     * The column <code>public.usertests.usertest_id</code>.
     */
    public final TableField<UsertestsRecord, Integer> USERTEST_ID = createField("usertest_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('usertests_usertest_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.usertests.test_guid</code>.
     */
    public final TableField<UsertestsRecord, String> TEST_GUID = createField("test_guid", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.usertests.employer_id</code>.
     */
    public final TableField<UsertestsRecord, Integer> EMPLOYER_ID = createField("employer_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.usertests.modifiable</code>.
     */
    public final TableField<UsertestsRecord, Boolean> MODIFIABLE = createField("modifiable", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.usertests.common</code>.
     */
    public final TableField<UsertestsRecord, Integer> COMMON = createField("common", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.usertests.hidden</code>.
     */
    public final TableField<UsertestsRecord, Boolean> HIDDEN = createField("hidden", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.usertests.creation_date</code>.
     */
    public final TableField<UsertestsRecord, LocalDateTime> CREATION_DATE = createField("creation_date", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.usertests.fully_scored</code>.
     */
    public final TableField<UsertestsRecord, Boolean> FULLY_SCORED = createField("fully_scored", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.usertests.solutions_count</code>.
     */
    public final TableField<UsertestsRecord, Integer> SOLUTIONS_COUNT = createField("solutions_count", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.usertests.vacancies_count</code>.
     */
    public final TableField<UsertestsRecord, Integer> VACANCIES_COUNT = createField("vacancies_count", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.usertests.source_guid</code>.
     */
    public final TableField<UsertestsRecord, String> SOURCE_GUID = createField("source_guid", org.jooq.impl.SQLDataType.VARCHAR.length(64).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.usertests.overt</code>.
     */
    public final TableField<UsertestsRecord, Boolean> OVERT = createField("overt", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.usertests</code> table reference
     */
    public Usertests() {
        this("usertests", null);
    }

    /**
     * Create an aliased <code>public.usertests</code> table reference
     */
    public Usertests(String alias) {
        this(alias, USERTESTS);
    }

    private Usertests(String alias, Table<UsertestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usertests(String alias, Table<UsertestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UsertestsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USERTESTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsertestsRecord> getPrimaryKey() {
        return Keys.USERTESTS_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsertestsRecord>> getKeys() {
        return Arrays.<UniqueKey<UsertestsRecord>>asList(Keys.USERTESTS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UsertestsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsertestsRecord, ?>>asList(Keys.USERTESTS__FK155E0936543B7049);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usertests as(String alias) {
        return new Usertests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usertests rename(String name) {
        return new Usertests(name, null);
    }
}
