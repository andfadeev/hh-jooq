/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.EmployerProfessionalAreaRecord;


/**
 * unused anywhere in code and can be probably deleted after grace period
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployerProfessionalArea extends TableImpl<EmployerProfessionalAreaRecord> {

    private static final long serialVersionUID = 1803294910;

    /**
     * The reference instance of <code>public.employer_professional_area</code>
     */
    public static final EmployerProfessionalArea EMPLOYER_PROFESSIONAL_AREA = new EmployerProfessionalArea();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployerProfessionalAreaRecord> getRecordType() {
        return EmployerProfessionalAreaRecord.class;
    }

    /**
     * The column <code>public.employer_professional_area.employer_professional_area_id</code>.
     */
    public final TableField<EmployerProfessionalAreaRecord, Integer> EMPLOYER_PROFESSIONAL_AREA_ID = createField("employer_professional_area_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('employer_professional_area_employer_professional_area_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.employer_professional_area.employer_id</code>.
     */
    public final TableField<EmployerProfessionalAreaRecord, Integer> EMPLOYER_ID = createField("employer_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.employer_professional_area.professional_area_id</code>.
     */
    public final TableField<EmployerProfessionalAreaRecord, Integer> PROFESSIONAL_AREA_ID = createField("professional_area_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.employer_professional_area</code> table reference
     */
    public EmployerProfessionalArea() {
        this("employer_professional_area", null);
    }

    /**
     * Create an aliased <code>public.employer_professional_area</code> table reference
     */
    public EmployerProfessionalArea(String alias) {
        this(alias, EMPLOYER_PROFESSIONAL_AREA);
    }

    private EmployerProfessionalArea(String alias, Table<EmployerProfessionalAreaRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployerProfessionalArea(String alias, Table<EmployerProfessionalAreaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "unused anywhere in code and can be probably deleted after grace period");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EmployerProfessionalAreaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EMPLOYER_PROFESSIONAL_AREA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployerProfessionalAreaRecord> getPrimaryKey() {
        return Keys.EMPLOYER_PROFESSIONAL_AREA_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployerProfessionalAreaRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployerProfessionalAreaRecord>>asList(Keys.EMPLOYER_PROFESSIONAL_AREA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EmployerProfessionalAreaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployerProfessionalAreaRecord, ?>>asList(Keys.EMPLOYER_PROFESSIONAL_AREA__EMPLOYER_ID_FKEY, Keys.EMPLOYER_PROFESSIONAL_AREA__PROFESSIONAL_AREA_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployerProfessionalArea as(String alias) {
        return new EmployerProfessionalArea(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployerProfessionalArea rename(String name) {
        return new EmployerProfessionalArea(name, null);
    }
}
