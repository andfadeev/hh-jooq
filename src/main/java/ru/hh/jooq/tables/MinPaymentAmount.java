/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.MinPaymentAmountRecord;


/**
 * Таблица содержит все правила определения минимального платежа для счетов 
 * в разрезе регионов, типов компаний и типов оплаты
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MinPaymentAmount extends TableImpl<MinPaymentAmountRecord> {

    private static final long serialVersionUID = 595660351;

    /**
     * The reference instance of <code>public.min_payment_amount</code>
     */
    public static final MinPaymentAmount MIN_PAYMENT_AMOUNT = new MinPaymentAmount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MinPaymentAmountRecord> getRecordType() {
        return MinPaymentAmountRecord.class;
    }

    /**
     * The column <code>public.min_payment_amount.min_payment_amount_id</code>.
     */
    public final TableField<MinPaymentAmountRecord, Integer> MIN_PAYMENT_AMOUNT_ID = createField("min_payment_amount_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('min_payment_amount_min_payment_amount_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.min_payment_amount.employer_category</code>.
     */
    public final TableField<MinPaymentAmountRecord, Integer> EMPLOYER_CATEGORY = createField("employer_category", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.min_payment_amount.payment_type</code>.
     */
    public final TableField<MinPaymentAmountRecord, Integer> PAYMENT_TYPE = createField("payment_type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.min_payment_amount.state</code>.
     */
    public final TableField<MinPaymentAmountRecord, Integer> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.min_payment_amount.area_id</code>.
     */
    public final TableField<MinPaymentAmountRecord, Integer> AREA_ID = createField("area_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.min_payment_amount.value_as_cents</code>.
     */
    public final TableField<MinPaymentAmountRecord, Integer> VALUE_AS_CENTS = createField("value_as_cents", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.min_payment_amount.priority</code>.
     */
    public final TableField<MinPaymentAmountRecord, Integer> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.min_payment_amount.value_as_cents_rollback</code>.
     */
    public final TableField<MinPaymentAmountRecord, Integer> VALUE_AS_CENTS_ROLLBACK = createField("value_as_cents_rollback", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.min_payment_amount</code> table reference
     */
    public MinPaymentAmount() {
        this("min_payment_amount", null);
    }

    /**
     * Create an aliased <code>public.min_payment_amount</code> table reference
     */
    public MinPaymentAmount(String alias) {
        this(alias, MIN_PAYMENT_AMOUNT);
    }

    private MinPaymentAmount(String alias, Table<MinPaymentAmountRecord> aliased) {
        this(alias, aliased, null);
    }

    private MinPaymentAmount(String alias, Table<MinPaymentAmountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Таблица содержит все правила определения минимального платежа для счетов в разрезе регионов, типов компаний и типов оплаты");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MinPaymentAmountRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MIN_PAYMENT_AMOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MinPaymentAmountRecord> getPrimaryKey() {
        return Keys.MIN_PAYMENT_AMOUNT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MinPaymentAmountRecord>> getKeys() {
        return Arrays.<UniqueKey<MinPaymentAmountRecord>>asList(Keys.MIN_PAYMENT_AMOUNT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MinPaymentAmountRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MinPaymentAmountRecord, ?>>asList(Keys.MIN_PAYMENT_AMOUNT__MIN_PAYMENT_AMOUNT_AREA_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MinPaymentAmount as(String alias) {
        return new MinPaymentAmount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MinPaymentAmount rename(String name) {
        return new MinPaymentAmount(name, null);
    }
}
