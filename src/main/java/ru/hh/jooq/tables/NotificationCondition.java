/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.NotificationConditionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationCondition extends TableImpl<NotificationConditionRecord> {

    private static final long serialVersionUID = 1903712950;

    /**
     * The reference instance of <code>public.notification_condition</code>
     */
    public static final NotificationCondition NOTIFICATION_CONDITION = new NotificationCondition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationConditionRecord> getRecordType() {
        return NotificationConditionRecord.class;
    }

    /**
     * The column <code>public.notification_condition.minimum</code>.
     */
    public final TableField<NotificationConditionRecord, Integer> MINIMUM = createField("minimum", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.notification_condition.account_id</code>.
     */
    public final TableField<NotificationConditionRecord, Integer> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.notification_condition.service_entry</code>.
     */
    public final TableField<NotificationConditionRecord, String> SERVICE_ENTRY = createField("service_entry", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * Create a <code>public.notification_condition</code> table reference
     */
    public NotificationCondition() {
        this("notification_condition", null);
    }

    /**
     * Create an aliased <code>public.notification_condition</code> table reference
     */
    public NotificationCondition(String alias) {
        this(alias, NOTIFICATION_CONDITION);
    }

    private NotificationCondition(String alias, Table<NotificationConditionRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationCondition(String alias, Table<NotificationConditionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NotificationConditionRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_CONDITION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NotificationConditionRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationConditionRecord>>asList(Keys.NOTIFICATION_CONDITION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NotificationConditionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotificationConditionRecord, ?>>asList(Keys.NOTIFICATION_CONDITION__NOTIFICATION_CONDITION_ACCOUNT_ID_FKEY, Keys.NOTIFICATION_CONDITION__NOTIFICATION_CONDITION_SERVICE_ENTRY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationCondition as(String alias) {
        return new NotificationCondition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationCondition rename(String name) {
        return new NotificationCondition(name, null);
    }
}
