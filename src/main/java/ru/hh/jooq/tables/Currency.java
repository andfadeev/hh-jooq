/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.CurrencyRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Currency extends TableImpl<CurrencyRecord> {

    private static final long serialVersionUID = 1227623011;

    /**
     * The reference instance of <code>public.currency</code>
     */
    public static final Currency CURRENCY = new Currency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrencyRecord> getRecordType() {
        return CurrencyRecord.class;
    }

    /**
     * The column <code>public.currency.code</code>.
     */
    public final TableField<CurrencyRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CHAR.length(3).nullable(false), this, "");

    /**
     * The column <code>public.currency.rate</code>.
     */
    public final TableField<CurrencyRecord, BigDecimal> RATE = createField("rate", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 6).nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.currency.masculine</code>.
     */
    public final TableField<CurrencyRecord, Boolean> MASCULINE = createField("masculine", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.currency.scale</code>.
     */
    public final TableField<CurrencyRecord, Integer> SCALE = createField("scale", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("2", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.currency.last_rate_change_time</code>.
     */
    public final TableField<CurrencyRecord, LocalDateTime> LAST_RATE_CHANGE_TIME = createField("last_rate_change_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>public.currency</code> table reference
     */
    public Currency() {
        this("currency", null);
    }

    /**
     * Create an aliased <code>public.currency</code> table reference
     */
    public Currency(String alias) {
        this(alias, CURRENCY);
    }

    private Currency(String alias, Table<CurrencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Currency(String alias, Table<CurrencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CurrencyRecord> getPrimaryKey() {
        return Keys.CURRENCY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CurrencyRecord>> getKeys() {
        return Arrays.<UniqueKey<CurrencyRecord>>asList(Keys.CURRENCY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Currency as(String alias) {
        return new Currency(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Currency rename(String name) {
        return new Currency(name, null);
    }
}
