/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.KeySkillRecord;


/**
 * HH-37351 Contains key skills for resume
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeySkill extends TableImpl<KeySkillRecord> {

    private static final long serialVersionUID = 1679550571;

    /**
     * The reference instance of <code>public.key_skill</code>
     */
    public static final KeySkill KEY_SKILL = new KeySkill();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KeySkillRecord> getRecordType() {
        return KeySkillRecord.class;
    }

    /**
     * The column <code>public.key_skill.key_skill_id</code>.
     */
    public final TableField<KeySkillRecord, Integer> KEY_SKILL_ID = createField("key_skill_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('key_skill_key_skill_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.key_skill.general</code>.
     */
    public final TableField<KeySkillRecord, Boolean> GENERAL = createField("general", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.key_skill.name</code>.
     */
    public final TableField<KeySkillRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.key_skill.parent_id</code>.
     */
    public final TableField<KeySkillRecord, Integer> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.key_skill.searchable</code>.
     */
    public final TableField<KeySkillRecord, Boolean> SEARCHABLE = createField("searchable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.key_skill</code> table reference
     */
    public KeySkill() {
        this("key_skill", null);
    }

    /**
     * Create an aliased <code>public.key_skill</code> table reference
     */
    public KeySkill(String alias) {
        this(alias, KEY_SKILL);
    }

    private KeySkill(String alias, Table<KeySkillRecord> aliased) {
        this(alias, aliased, null);
    }

    private KeySkill(String alias, Table<KeySkillRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "HH-37351 Contains key skills for resume");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<KeySkillRecord, Integer> getIdentity() {
        return Keys.IDENTITY_KEY_SKILL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<KeySkillRecord> getPrimaryKey() {
        return Keys.KEY_SKILL_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<KeySkillRecord>> getKeys() {
        return Arrays.<UniqueKey<KeySkillRecord>>asList(Keys.KEY_SKILL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<KeySkillRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<KeySkillRecord, ?>>asList(Keys.KEY_SKILL__KEY_SKILL_PARENT_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KeySkill as(String alias) {
        return new KeySkill(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KeySkill rename(String name) {
        return new KeySkill(name, null);
    }
}
