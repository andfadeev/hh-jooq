/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.ServiceTicketRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceTicket extends TableImpl<ServiceTicketRecord> {

    private static final long serialVersionUID = 1407691470;

    /**
     * The reference instance of <code>public.service_ticket</code>
     */
    public static final ServiceTicket SERVICE_TICKET = new ServiceTicket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceTicketRecord> getRecordType() {
        return ServiceTicketRecord.class;
    }

    /**
     * The column <code>public.service_ticket.uid</code>.
     */
    public final TableField<ServiceTicketRecord, Long> UID = createField("uid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.service_ticket.service_item_id</code>.
     */
    public final TableField<ServiceTicketRecord, Integer> SERVICE_ITEM_ID = createField("service_item_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.service_ticket.version_</code>.
     */
    public final TableField<ServiceTicketRecord, Integer> VERSION_ = createField("version_", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.service_ticket.used</code>.
     */
    public final TableField<ServiceTicketRecord, Boolean> USED = createField("used", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.service_ticket.state</code>.
     */
    public final TableField<ServiceTicketRecord, Short> STATE = createField("state", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>public.service_ticket</code> table reference
     */
    public ServiceTicket() {
        this("service_ticket", null);
    }

    /**
     * Create an aliased <code>public.service_ticket</code> table reference
     */
    public ServiceTicket(String alias) {
        this(alias, SERVICE_TICKET);
    }

    private ServiceTicket(String alias, Table<ServiceTicketRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServiceTicket(String alias, Table<ServiceTicketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServiceTicketRecord> getPrimaryKey() {
        return Keys.SERVICE_TICKET_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServiceTicketRecord>> getKeys() {
        return Arrays.<UniqueKey<ServiceTicketRecord>>asList(Keys.SERVICE_TICKET_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ServiceTicketRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ServiceTicketRecord, ?>>asList(Keys.SERVICE_TICKET__FK909E9BD6BF735E70);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceTicket as(String alias) {
        return new ServiceTicket(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceTicket rename(String name) {
        return new ServiceTicket(name, null);
    }
}
