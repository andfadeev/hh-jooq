/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.AgreementRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Agreement extends TableImpl<AgreementRecord> {

    private static final long serialVersionUID = -804952061;

    /**
     * The reference instance of <code>public.agreement</code>
     */
    public static final Agreement AGREEMENT = new Agreement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AgreementRecord> getRecordType() {
        return AgreementRecord.class;
    }

    /**
     * The column <code>public.agreement.agreement_id</code>.
     */
    public final TableField<AgreementRecord, Integer> AGREEMENT_ID = createField("agreement_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('agreement_agreement_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.agreement.number</code>.
     */
    public final TableField<AgreementRecord, String> NUMBER = createField("number", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>public.agreement.name</code>.
     */
    public final TableField<AgreementRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.agreement.start_time</code>.
     */
    public final TableField<AgreementRecord, LocalDateTime> START_TIME = createField("start_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.agreement.end_time</code>.
     */
    public final TableField<AgreementRecord, LocalDateTime> END_TIME = createField("end_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.agreement.vfs_file_id</code>.
     */
    public final TableField<AgreementRecord, Integer> VFS_FILE_ID = createField("vfs_file_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.agreement.type</code>.
     */
    public final TableField<AgreementRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.agreement.comment</code>.
     */
    public final TableField<AgreementRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR.length(1024).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.agreement.agreement_state_id</code>.
     */
    public final TableField<AgreementRecord, Integer> AGREEMENT_STATE_ID = createField("agreement_state_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.agreement.payer_id</code>.
     */
    public final TableField<AgreementRecord, Integer> PAYER_ID = createField("payer_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.agreement.archive_paper_copy</code>.
     */
    public final TableField<AgreementRecord, Boolean> ARCHIVE_PAPER_COPY = createField("archive_paper_copy", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.agreement.special</code>.
     */
    public final TableField<AgreementRecord, Boolean> SPECIAL = createField("special", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.agreement.bill_type</code>.
     */
    public final TableField<AgreementRecord, Integer> BILL_TYPE = createField("bill_type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.agreement._index</code>.
     */
    public final TableField<AgreementRecord, Integer> _INDEX = createField("_index", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.agreement._fizik</code>.
     */
    public final TableField<AgreementRecord, Boolean> _FIZIK = createField("_fizik", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.agreement.is_barter</code>.
     */
    public final TableField<AgreementRecord, Boolean> IS_BARTER = createField("is_barter", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.agreement.state_last_update_time</code>. unused
     */
    public final TableField<AgreementRecord, LocalDateTime> STATE_LAST_UPDATE_TIME = createField("state_last_update_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "unused");

    /**
     * The column <code>public.agreement.billing_file_id</code>.
     */
    public final TableField<AgreementRecord, Integer> BILLING_FILE_ID = createField("billing_file_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.agreement</code> table reference
     */
    public Agreement() {
        this("agreement", null);
    }

    /**
     * Create an aliased <code>public.agreement</code> table reference
     */
    public Agreement(String alias) {
        this(alias, AGREEMENT);
    }

    private Agreement(String alias, Table<AgreementRecord> aliased) {
        this(alias, aliased, null);
    }

    private Agreement(String alias, Table<AgreementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AgreementRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AGREEMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AgreementRecord> getPrimaryKey() {
        return Keys.AGREEMENT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AgreementRecord>> getKeys() {
        return Arrays.<UniqueKey<AgreementRecord>>asList(Keys.AGREEMENT_PK, Keys.AGREEMENT_NUMBER_UNIQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AgreementRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AgreementRecord, ?>>asList(Keys.AGREEMENT__AGREEMENT_STATE_FK, Keys.AGREEMENT__AGREEMENT_PAYER_FK, Keys.AGREEMENT__AGREEMENT_FILE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Agreement as(String alias) {
        return new Agreement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Agreement rename(String name) {
        return new Agreement(name, null);
    }
}
