/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.CommonTestCategoryCommonTestRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonTestCategoryCommonTest extends TableImpl<CommonTestCategoryCommonTestRecord> {

    private static final long serialVersionUID = -1006097846;

    /**
     * The reference instance of <code>public.common_test_category_common_test</code>
     */
    public static final CommonTestCategoryCommonTest COMMON_TEST_CATEGORY_COMMON_TEST = new CommonTestCategoryCommonTest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommonTestCategoryCommonTestRecord> getRecordType() {
        return CommonTestCategoryCommonTestRecord.class;
    }

    /**
     * The column <code>public.common_test_category_common_test.common_test_category_id</code>.
     */
    public final TableField<CommonTestCategoryCommonTestRecord, Integer> COMMON_TEST_CATEGORY_ID = createField("common_test_category_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.common_test_category_common_test.common_test_id</code>.
     */
    public final TableField<CommonTestCategoryCommonTestRecord, Integer> COMMON_TEST_ID = createField("common_test_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.common_test_category_common_test</code> table reference
     */
    public CommonTestCategoryCommonTest() {
        this("common_test_category_common_test", null);
    }

    /**
     * Create an aliased <code>public.common_test_category_common_test</code> table reference
     */
    public CommonTestCategoryCommonTest(String alias) {
        this(alias, COMMON_TEST_CATEGORY_COMMON_TEST);
    }

    private CommonTestCategoryCommonTest(String alias, Table<CommonTestCategoryCommonTestRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommonTestCategoryCommonTest(String alias, Table<CommonTestCategoryCommonTestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CommonTestCategoryCommonTestRecord> getPrimaryKey() {
        return Keys.COMMON_TEST_CATEGORY_COMMON_TEST_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CommonTestCategoryCommonTestRecord>> getKeys() {
        return Arrays.<UniqueKey<CommonTestCategoryCommonTestRecord>>asList(Keys.COMMON_TEST_CATEGORY_COMMON_TEST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonTestCategoryCommonTest as(String alias) {
        return new CommonTestCategoryCommonTest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonTestCategoryCommonTest rename(String name) {
        return new CommonTestCategoryCommonTest(name, null);
    }
}
