/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.RecurrentServiceRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecurrentService extends TableImpl<RecurrentServiceRecord> {

    private static final long serialVersionUID = 905543203;

    /**
     * The reference instance of <code>public.recurrent_service</code>
     */
    public static final RecurrentService RECURRENT_SERVICE = new RecurrentService();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecurrentServiceRecord> getRecordType() {
        return RecurrentServiceRecord.class;
    }

    /**
     * The column <code>public.recurrent_service.id</code>.
     */
    public final TableField<RecurrentServiceRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('recurrent_service_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.recurrent_service.seller_account_id</code>.
     */
    public final TableField<RecurrentServiceRecord, Integer> SELLER_ACCOUNT_ID = createField("seller_account_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.recurrent_service.category</code>.
     */
    public final TableField<RecurrentServiceRecord, Integer> CATEGORY = createField("category", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.recurrent_service.job_site</code>.
     */
    public final TableField<RecurrentServiceRecord, Integer> JOB_SITE = createField("job_site", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.recurrent_service.code</code>.
     */
    public final TableField<RecurrentServiceRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.recurrent_service.welcome</code>. HH-59962 values moved to recurrent_type. Has to be dropped
     */
    public final TableField<RecurrentServiceRecord, Boolean> WELCOME = createField("welcome", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "HH-59962 values moved to recurrent_type. Has to be dropped");

    /**
     * The column <code>public.recurrent_service.value</code>.
     */
    public final TableField<RecurrentServiceRecord, Integer> VALUE = createField("value", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.recurrent_service.recurrent_type</code>.
     */
    public final TableField<RecurrentServiceRecord, Integer> RECURRENT_TYPE = createField("recurrent_type", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.recurrent_service</code> table reference
     */
    public RecurrentService() {
        this("recurrent_service", null);
    }

    /**
     * Create an aliased <code>public.recurrent_service</code> table reference
     */
    public RecurrentService(String alias) {
        this(alias, RECURRENT_SERVICE);
    }

    private RecurrentService(String alias, Table<RecurrentServiceRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecurrentService(String alias, Table<RecurrentServiceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RecurrentServiceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RECURRENT_SERVICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RecurrentServiceRecord> getPrimaryKey() {
        return Keys.RECURRENT_SERVICE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RecurrentServiceRecord>> getKeys() {
        return Arrays.<UniqueKey<RecurrentServiceRecord>>asList(Keys.RECURRENT_SERVICE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RecurrentServiceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RecurrentServiceRecord, ?>>asList(Keys.RECURRENT_SERVICE__RECURRENT_SERVICE_SELLER_ACCOUNT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RecurrentService as(String alias) {
        return new RecurrentService(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurrentService rename(String name) {
        return new RecurrentService(name, null);
    }
}
