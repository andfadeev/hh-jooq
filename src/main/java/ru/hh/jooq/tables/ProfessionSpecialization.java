/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.ProfessionSpecializationRecord;


/**
 * many to many between profession and specialization
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProfessionSpecialization extends TableImpl<ProfessionSpecializationRecord> {

    private static final long serialVersionUID = 2057079461;

    /**
     * The reference instance of <code>public.profession_specialization</code>
     */
    public static final ProfessionSpecialization PROFESSION_SPECIALIZATION = new ProfessionSpecialization();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfessionSpecializationRecord> getRecordType() {
        return ProfessionSpecializationRecord.class;
    }

    /**
     * The column <code>public.profession_specialization.profession_id</code>.
     */
    public final TableField<ProfessionSpecializationRecord, Integer> PROFESSION_ID = createField("profession_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.profession_specialization.specialization_id</code>.
     */
    public final TableField<ProfessionSpecializationRecord, Integer> SPECIALIZATION_ID = createField("specialization_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.profession_specialization.profession_specialization_id</code>.
     */
    public final TableField<ProfessionSpecializationRecord, Integer> PROFESSION_SPECIALIZATION_ID = createField("profession_specialization_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('profession_specialization_profession_specialization_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.profession_specialization.for_resume</code>.
     */
    public final TableField<ProfessionSpecializationRecord, Boolean> FOR_RESUME = createField("for_resume", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.profession_specialization</code> table reference
     */
    public ProfessionSpecialization() {
        this("profession_specialization", null);
    }

    /**
     * Create an aliased <code>public.profession_specialization</code> table reference
     */
    public ProfessionSpecialization(String alias) {
        this(alias, PROFESSION_SPECIALIZATION);
    }

    private ProfessionSpecialization(String alias, Table<ProfessionSpecializationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProfessionSpecialization(String alias, Table<ProfessionSpecializationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "many to many between profession and specialization");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProfessionSpecializationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROFESSION_SPECIALIZATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProfessionSpecializationRecord> getPrimaryKey() {
        return Keys.PROFESSION_SPECIALIZATION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProfessionSpecializationRecord>> getKeys() {
        return Arrays.<UniqueKey<ProfessionSpecializationRecord>>asList(Keys.PROFESSION_SPECIALIZATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProfessionSpecializationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProfessionSpecializationRecord, ?>>asList(Keys.PROFESSION_SPECIALIZATION__PROFESSION_SPECIALIZATION_TO_PROFESSION_FK, Keys.PROFESSION_SPECIALIZATION__PROFESSION_SPECIALIZATION_TO_SPECIALIZAION_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProfessionSpecialization as(String alias) {
        return new ProfessionSpecialization(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfessionSpecialization rename(String name) {
        return new ProfessionSpecialization(name, null);
    }
}
