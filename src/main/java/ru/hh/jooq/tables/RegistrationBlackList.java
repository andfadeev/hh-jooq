/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.RegistrationBlackListRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegistrationBlackList extends TableImpl<RegistrationBlackListRecord> {

    private static final long serialVersionUID = -1592731832;

    /**
     * The reference instance of <code>public.registration_black_list</code>
     */
    public static final RegistrationBlackList REGISTRATION_BLACK_LIST = new RegistrationBlackList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegistrationBlackListRecord> getRecordType() {
        return RegistrationBlackListRecord.class;
    }

    /**
     * The column <code>public.registration_black_list.registration_black_list_id</code>.
     */
    public final TableField<RegistrationBlackListRecord, Integer> REGISTRATION_BLACK_LIST_ID = createField("registration_black_list_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('registration_black_list_registration_black_list_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.registration_black_list.type</code>.
     */
    public final TableField<RegistrationBlackListRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.registration_black_list.value</code>.
     */
    public final TableField<RegistrationBlackListRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.registration_black_list.employer_id</code>.
     */
    public final TableField<RegistrationBlackListRecord, Integer> EMPLOYER_ID = createField("employer_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.registration_black_list</code> table reference
     */
    public RegistrationBlackList() {
        this("registration_black_list", null);
    }

    /**
     * Create an aliased <code>public.registration_black_list</code> table reference
     */
    public RegistrationBlackList(String alias) {
        this(alias, REGISTRATION_BLACK_LIST);
    }

    private RegistrationBlackList(String alias, Table<RegistrationBlackListRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegistrationBlackList(String alias, Table<RegistrationBlackListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RegistrationBlackListRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REGISTRATION_BLACK_LIST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RegistrationBlackListRecord> getPrimaryKey() {
        return Keys.REGISTRATION_BLACK_LIST_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RegistrationBlackListRecord>> getKeys() {
        return Arrays.<UniqueKey<RegistrationBlackListRecord>>asList(Keys.REGISTRATION_BLACK_LIST_PKEY, Keys.REGISTRATION_BLACK_LIST_TYPE_VALUE_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RegistrationBlackListRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RegistrationBlackListRecord, ?>>asList(Keys.REGISTRATION_BLACK_LIST__FK_EMPLOYER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegistrationBlackList as(String alias) {
        return new RegistrationBlackList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegistrationBlackList rename(String name) {
        return new RegistrationBlackList(name, null);
    }
}
