/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.UniversityRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class University extends TableImpl<UniversityRecord> {

    private static final long serialVersionUID = -867658505;

    /**
     * The reference instance of <code>public.university</code>
     */
    public static final University UNIVERSITY = new University();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UniversityRecord> getRecordType() {
        return UniversityRecord.class;
    }

    /**
     * The column <code>public.university.university_id</code>.
     */
    public final TableField<UniversityRecord, Integer> UNIVERSITY_ID = createField("university_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('university_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.university.synonyms</code>.
     */
    public final TableField<UniversityRecord, String> SYNONYMS = createField("synonyms", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.university.original_id</code>.
     */
    public final TableField<UniversityRecord, Long> ORIGINAL_ID = createField("original_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.university.rate</code>.
     */
    public final TableField<UniversityRecord, Integer> RATE = createField("rate", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.university.area_id</code>.
     */
    public final TableField<UniversityRecord, Integer> AREA_ID = createField("area_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.university</code> table reference
     */
    public University() {
        this("university", null);
    }

    /**
     * Create an aliased <code>public.university</code> table reference
     */
    public University(String alias) {
        this(alias, UNIVERSITY);
    }

    private University(String alias, Table<UniversityRecord> aliased) {
        this(alias, aliased, null);
    }

    private University(String alias, Table<UniversityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UniversityRecord, Integer> getIdentity() {
        return Keys.IDENTITY_UNIVERSITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UniversityRecord> getPrimaryKey() {
        return Keys.UNIVERSITY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UniversityRecord>> getKeys() {
        return Arrays.<UniqueKey<UniversityRecord>>asList(Keys.UNIVERSITY_PKEY, Keys.UNIVERSITY_ORIGINAL_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UniversityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UniversityRecord, ?>>asList(Keys.UNIVERSITY__UNIVERSITY_AREA_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public University as(String alias) {
        return new University(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public University rename(String name) {
        return new University(name, null);
    }
}
