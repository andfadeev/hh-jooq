/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.MailTemplateRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MailTemplate extends TableImpl<MailTemplateRecord> {

    private static final long serialVersionUID = -1777381088;

    /**
     * The reference instance of <code>public.mail_template</code>
     */
    public static final MailTemplate MAIL_TEMPLATE = new MailTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MailTemplateRecord> getRecordType() {
        return MailTemplateRecord.class;
    }

    /**
     * The column <code>public.mail_template.mail_template_id</code>.
     */
    public final TableField<MailTemplateRecord, Integer> MAIL_TEMPLATE_ID = createField("mail_template_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mail_template_mail_template_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.mail_template.category</code>.
     */
    public final TableField<MailTemplateRecord, String> CATEGORY = createField("category", org.jooq.impl.SQLDataType.VARCHAR.length(64).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.mail_template.code</code>.
     */
    public final TableField<MailTemplateRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(64).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.mail_template.name</code>.
     */
    public final TableField<MailTemplateRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(128).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.mail_template.comment</code>.
     */
    public final TableField<MailTemplateRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.mail_template.from_mail</code>.
     */
    public final TableField<MailTemplateRecord, String> FROM_MAIL = createField("from_mail", org.jooq.impl.SQLDataType.VARCHAR.length(128).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.mail_template.processor_class</code>.
     */
    public final TableField<MailTemplateRecord, String> PROCESSOR_CLASS = createField("processor_class", org.jooq.impl.SQLDataType.VARCHAR.length(128).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.mail_template.params</code>.
     */
    public final TableField<MailTemplateRecord, String> PARAMS = createField("params", org.jooq.impl.SQLDataType.VARCHAR.length(1024).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.mail_template</code> table reference
     */
    public MailTemplate() {
        this("mail_template", null);
    }

    /**
     * Create an aliased <code>public.mail_template</code> table reference
     */
    public MailTemplate(String alias) {
        this(alias, MAIL_TEMPLATE);
    }

    private MailTemplate(String alias, Table<MailTemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private MailTemplate(String alias, Table<MailTemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MailTemplateRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MAIL_TEMPLATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MailTemplateRecord> getPrimaryKey() {
        return Keys.MAIL_TEMPLATE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MailTemplateRecord>> getKeys() {
        return Arrays.<UniqueKey<MailTemplateRecord>>asList(Keys.MAIL_TEMPLATE_PK, Keys.MAIL_TEMPLATE_CODE_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MailTemplate as(String alias) {
        return new MailTemplate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MailTemplate rename(String name) {
        return new MailTemplate(name, null);
    }
}
