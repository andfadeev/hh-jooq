/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.SpecializationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Specialization extends TableImpl<SpecializationRecord> {

    private static final long serialVersionUID = 1327403687;

    /**
     * The reference instance of <code>public.specialization</code>
     */
    public static final Specialization SPECIALIZATION = new Specialization();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpecializationRecord> getRecordType() {
        return SpecializationRecord.class;
    }

    /**
     * The column <code>public.specialization.specialization_id</code>.
     */
    public final TableField<SpecializationRecord, Integer> SPECIALIZATION_ID = createField("specialization_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('specialization_specialization_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.specialization.professional_area_id</code>.
     */
    public final TableField<SpecializationRecord, Integer> PROFESSIONAL_AREA_ID = createField("professional_area_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.specialization.name</code>.
     */
    public final TableField<SpecializationRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.specialization.alias</code>.
     */
    public final TableField<SpecializationRecord, Integer> ALIAS = createField("alias", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.specialization.platforms_bitset</code>.
     */
    public final TableField<SpecializationRecord, Integer> PLATFORMS_BITSET = createField("platforms_bitset", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.specialization.ru_translit</code>.
     */
    public final TableField<SpecializationRecord, String> RU_TRANSLIT = createField("ru_translit", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.specialization.visible</code>.
     */
    public final TableField<SpecializationRecord, Boolean> VISIBLE = createField("visible", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.specialization</code> table reference
     */
    public Specialization() {
        this("specialization", null);
    }

    /**
     * Create an aliased <code>public.specialization</code> table reference
     */
    public Specialization(String alias) {
        this(alias, SPECIALIZATION);
    }

    private Specialization(String alias, Table<SpecializationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Specialization(String alias, Table<SpecializationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SpecializationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SPECIALIZATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SpecializationRecord> getPrimaryKey() {
        return Keys.SPECIALIZATION_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SpecializationRecord>> getKeys() {
        return Arrays.<UniqueKey<SpecializationRecord>>asList(Keys.SPECIALIZATION_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SpecializationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SpecializationRecord, ?>>asList(Keys.SPECIALIZATION__SPECIALIZATION_PROFESSIONAL_AREA_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Specialization as(String alias) {
        return new Specialization(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Specialization rename(String name) {
        return new Specialization(name, null);
    }
}
