/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.LanguageDaxtraRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LanguageDaxtra extends TableImpl<LanguageDaxtraRecord> {

    private static final long serialVersionUID = 1934627207;

    /**
     * The reference instance of <code>public.language_daxtra</code>
     */
    public static final LanguageDaxtra LANGUAGE_DAXTRA = new LanguageDaxtra();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LanguageDaxtraRecord> getRecordType() {
        return LanguageDaxtraRecord.class;
    }

    /**
     * The column <code>public.language_daxtra.language_daxtra_id</code>.
     */
    public final TableField<LanguageDaxtraRecord, Integer> LANGUAGE_DAXTRA_ID = createField("language_daxtra_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('language_daxtra_language_daxtra_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.language_daxtra.name</code>.
     */
    public final TableField<LanguageDaxtraRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>public.language_daxtra.language_id</code>.
     */
    public final TableField<LanguageDaxtraRecord, Short> LANGUAGE_ID = createField("language_id", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>public.language_daxtra</code> table reference
     */
    public LanguageDaxtra() {
        this("language_daxtra", null);
    }

    /**
     * Create an aliased <code>public.language_daxtra</code> table reference
     */
    public LanguageDaxtra(String alias) {
        this(alias, LANGUAGE_DAXTRA);
    }

    private LanguageDaxtra(String alias, Table<LanguageDaxtraRecord> aliased) {
        this(alias, aliased, null);
    }

    private LanguageDaxtra(String alias, Table<LanguageDaxtraRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LanguageDaxtraRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LANGUAGE_DAXTRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LanguageDaxtraRecord> getPrimaryKey() {
        return Keys.LANGUAGE_DAXTRA_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LanguageDaxtraRecord>> getKeys() {
        return Arrays.<UniqueKey<LanguageDaxtraRecord>>asList(Keys.LANGUAGE_DAXTRA_PKEY, Keys.LANGUAGE_DAXTRA_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LanguageDaxtra as(String alias) {
        return new LanguageDaxtra(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageDaxtra rename(String name) {
        return new LanguageDaxtra(name, null);
    }
}
