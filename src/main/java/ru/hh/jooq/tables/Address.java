/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.AddressRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = -52569544;

    /**
     * The reference instance of <code>public.address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>public.address.address_id</code>.
     */
    public final TableField<AddressRecord, Integer> ADDRESS_ID = createField("address_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('address_address_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.address.city</code>.
     */
    public final TableField<AddressRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR.length(1024).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.address.street</code>.
     */
    public final TableField<AddressRecord, String> STREET = createField("street", org.jooq.impl.SQLDataType.VARCHAR.length(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.address.building</code>.
     */
    public final TableField<AddressRecord, String> BUILDING = createField("building", org.jooq.impl.SQLDataType.VARCHAR.length(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.address.description</code>.
     */
    public final TableField<AddressRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.address.employer_manager_id</code>.
     */
    public final TableField<AddressRecord, Integer> EMPLOYER_MANAGER_ID = createField("employer_manager_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.address.lat</code>.
     */
    public final TableField<AddressRecord, Double> LAT = createField("lat", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.address.lng</code>.
     */
    public final TableField<AddressRecord, Double> LNG = createField("lng", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.address.map_data</code>.
     */
    public final TableField<AddressRecord, String> MAP_DATA = createField("map_data", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.address.raw_address</code>.
     */
    public final TableField<AddressRecord, String> RAW_ADDRESS = createField("raw_address", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.address.disabled</code>.
     */
    public final TableField<AddressRecord, Boolean> DISABLED = createField("disabled", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.address</code> table reference
     */
    public Address() {
        this("address", null);
    }

    /**
     * Create an aliased <code>public.address</code> table reference
     */
    public Address(String alias) {
        this(alias, ADDRESS);
    }

    private Address(String alias, Table<AddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Address(String alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AddressRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ADDRESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.ADDRESS_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AddressRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressRecord>>asList(Keys.ADDRESS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Address as(String alias) {
        return new Address(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(String name) {
        return new Address(name, null);
    }
}
