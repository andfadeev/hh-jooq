/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.BatchProcessingItemRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchProcessingItem extends TableImpl<BatchProcessingItemRecord> {

    private static final long serialVersionUID = 415545160;

    /**
     * The reference instance of <code>public.batch_processing_item</code>
     */
    public static final BatchProcessingItem BATCH_PROCESSING_ITEM = new BatchProcessingItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchProcessingItemRecord> getRecordType() {
        return BatchProcessingItemRecord.class;
    }

    /**
     * The column <code>public.batch_processing_item.id</code>.
     */
    public final TableField<BatchProcessingItemRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('batch_processing_item_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.batch_processing_item.task_id</code>.
     */
    public final TableField<BatchProcessingItemRecord, String> TASK_ID = createField("task_id", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>public.batch_processing_item.item_id</code>.
     */
    public final TableField<BatchProcessingItemRecord, Integer> ITEM_ID = createField("item_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.batch_processing_item.result</code>.
     */
    public final TableField<BatchProcessingItemRecord, String> RESULT = createField("result", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.batch_processing_item.error</code>.
     */
    public final TableField<BatchProcessingItemRecord, String> ERROR = createField("error", org.jooq.impl.SQLDataType.VARCHAR.length(4000), this, "");

    /**
     * Create a <code>public.batch_processing_item</code> table reference
     */
    public BatchProcessingItem() {
        this("batch_processing_item", null);
    }

    /**
     * Create an aliased <code>public.batch_processing_item</code> table reference
     */
    public BatchProcessingItem(String alias) {
        this(alias, BATCH_PROCESSING_ITEM);
    }

    private BatchProcessingItem(String alias, Table<BatchProcessingItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchProcessingItem(String alias, Table<BatchProcessingItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BatchProcessingItemRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BATCH_PROCESSING_ITEM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BatchProcessingItemRecord> getPrimaryKey() {
        return Keys.BATCH_PROCESSING_ITEM_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BatchProcessingItemRecord>> getKeys() {
        return Arrays.<UniqueKey<BatchProcessingItemRecord>>asList(Keys.BATCH_PROCESSING_ITEM_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchProcessingItem as(String alias) {
        return new BatchProcessingItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchProcessingItem rename(String name) {
        return new BatchProcessingItem(name, null);
    }
}
