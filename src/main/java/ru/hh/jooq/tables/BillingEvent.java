/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.BillingEventRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BillingEvent extends TableImpl<BillingEventRecord> {

    private static final long serialVersionUID = -885911102;

    /**
     * The reference instance of <code>public.billing_event</code>
     */
    public static final BillingEvent BILLING_EVENT = new BillingEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BillingEventRecord> getRecordType() {
        return BillingEventRecord.class;
    }

    /**
     * The column <code>public.billing_event.id</code>.
     */
    public final TableField<BillingEventRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('billing_event_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.billing_event.event_system_type_id</code>.
     */
    public final TableField<BillingEventRecord, Integer> EVENT_SYSTEM_TYPE_ID = createField("event_system_type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.billing_event.creation_time</code>.
     */
    public final TableField<BillingEventRecord, LocalDateTime> CREATION_TIME = createField("creation_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("'1970-01-01 00:00:00'::timestamp without time zone", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.billing_event.user_id</code>.
     */
    public final TableField<BillingEventRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.billing_event.account_id</code>.
     */
    public final TableField<BillingEventRecord, Integer> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.billing_event.description</code>.
     */
    public final TableField<BillingEventRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.billing_event</code> table reference
     */
    public BillingEvent() {
        this("billing_event", null);
    }

    /**
     * Create an aliased <code>public.billing_event</code> table reference
     */
    public BillingEvent(String alias) {
        this(alias, BILLING_EVENT);
    }

    private BillingEvent(String alias, Table<BillingEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private BillingEvent(String alias, Table<BillingEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BillingEventRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BILLING_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BillingEventRecord> getPrimaryKey() {
        return Keys.BILLING_EVENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BillingEventRecord>> getKeys() {
        return Arrays.<UniqueKey<BillingEventRecord>>asList(Keys.BILLING_EVENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingEvent as(String alias) {
        return new BillingEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BillingEvent rename(String name) {
        return new BillingEvent(name, null);
    }
}
