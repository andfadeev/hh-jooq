/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.DigestConfirmationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DigestConfirmation extends TableImpl<DigestConfirmationRecord> {

    private static final long serialVersionUID = 56682368;

    /**
     * The reference instance of <code>public.digest_confirmation</code>
     */
    public static final DigestConfirmation DIGEST_CONFIRMATION = new DigestConfirmation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DigestConfirmationRecord> getRecordType() {
        return DigestConfirmationRecord.class;
    }

    /**
     * The column <code>public.digest_confirmation.account_id</code>.
     */
    public final TableField<DigestConfirmationRecord, Integer> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.digest_confirmation.client</code>.
     */
    public final TableField<DigestConfirmationRecord, String> CLIENT = createField("client", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.digest_confirmation.confirmed</code>.
     */
    public final TableField<DigestConfirmationRecord, Boolean> CONFIRMED = createField("confirmed", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.digest_confirmation</code> table reference
     */
    public DigestConfirmation() {
        this("digest_confirmation", null);
    }

    /**
     * Create an aliased <code>public.digest_confirmation</code> table reference
     */
    public DigestConfirmation(String alias) {
        this(alias, DIGEST_CONFIRMATION);
    }

    private DigestConfirmation(String alias, Table<DigestConfirmationRecord> aliased) {
        this(alias, aliased, null);
    }

    private DigestConfirmation(String alias, Table<DigestConfirmationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DigestConfirmationRecord> getPrimaryKey() {
        return Keys.DIGEST_CONFIRMATION_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DigestConfirmationRecord>> getKeys() {
        return Arrays.<UniqueKey<DigestConfirmationRecord>>asList(Keys.DIGEST_CONFIRMATION_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DigestConfirmationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DigestConfirmationRecord, ?>>asList(Keys.DIGEST_CONFIRMATION__SERVICE_DIGEST_VERSION_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DigestConfirmation as(String alias) {
        return new DigestConfirmation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DigestConfirmation rename(String name) {
        return new DigestConfirmation(name, null);
    }
}
