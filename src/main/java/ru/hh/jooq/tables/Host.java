/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.HostRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Host extends TableImpl<HostRecord> {

    private static final long serialVersionUID = 1897934559;

    /**
     * The reference instance of <code>public.host</code>
     */
    public static final Host HOST = new Host();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HostRecord> getRecordType() {
        return HostRecord.class;
    }

    /**
     * The column <code>public.host.domain</code>.
     */
    public final TableField<HostRecord, String> DOMAIN = createField("domain", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>public.host.platform</code>.
     */
    public final TableField<HostRecord, Integer> PLATFORM = createField("platform", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.host.area</code>.
     */
    public final TableField<HostRecord, Integer> AREA = createField("area", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.host.city</code>.
     */
    public final TableField<HostRecord, Integer> CITY = createField("city", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.host.transliteration</code>.
     */
    public final TableField<HostRecord, String> TRANSLITERATION = createField("transliteration", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * Create a <code>public.host</code> table reference
     */
    public Host() {
        this("host", null);
    }

    /**
     * Create an aliased <code>public.host</code> table reference
     */
    public Host(String alias) {
        this(alias, HOST);
    }

    private Host(String alias, Table<HostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Host(String alias, Table<HostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HostRecord> getPrimaryKey() {
        return Keys.HOST_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HostRecord>> getKeys() {
        return Arrays.<UniqueKey<HostRecord>>asList(Keys.HOST_PKEY, Keys.HOST_PLATFORM_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Host as(String alias) {
        return new Host(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Host rename(String name) {
        return new Host(name, null);
    }
}
