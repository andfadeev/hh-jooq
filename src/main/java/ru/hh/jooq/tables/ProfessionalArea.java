/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.ProfessionalAreaRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProfessionalArea extends TableImpl<ProfessionalAreaRecord> {

    private static final long serialVersionUID = -1578258413;

    /**
     * The reference instance of <code>public.professional_area</code>
     */
    public static final ProfessionalArea PROFESSIONAL_AREA = new ProfessionalArea();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfessionalAreaRecord> getRecordType() {
        return ProfessionalAreaRecord.class;
    }

    /**
     * The column <code>public.professional_area.professional_area_id</code>.
     */
    public final TableField<ProfessionalAreaRecord, Integer> PROFESSIONAL_AREA_ID = createField("professional_area_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('professional_area_professional_area_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.professional_area.name</code>.
     */
    public final TableField<ProfessionalAreaRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.professional_area.alias</code>.
     */
    public final TableField<ProfessionalAreaRecord, Integer> ALIAS = createField("alias", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.professional_area.price_rate</code>.
     */
    public final TableField<ProfessionalAreaRecord, BigDecimal> PRICE_RATE = createField("price_rate", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 8).defaultValue(org.jooq.impl.DSL.field("NULL::numeric", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.professional_area.ru_translit</code>.
     */
    public final TableField<ProfessionalAreaRecord, String> RU_TRANSLIT = createField("ru_translit", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.professional_area.visible</code>.
     */
    public final TableField<ProfessionalAreaRecord, Boolean> VISIBLE = createField("visible", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.professional_area</code> table reference
     */
    public ProfessionalArea() {
        this("professional_area", null);
    }

    /**
     * Create an aliased <code>public.professional_area</code> table reference
     */
    public ProfessionalArea(String alias) {
        this(alias, PROFESSIONAL_AREA);
    }

    private ProfessionalArea(String alias, Table<ProfessionalAreaRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProfessionalArea(String alias, Table<ProfessionalAreaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProfessionalAreaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROFESSIONAL_AREA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProfessionalAreaRecord> getPrimaryKey() {
        return Keys.PROFESSIONAL_AREA_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProfessionalAreaRecord>> getKeys() {
        return Arrays.<UniqueKey<ProfessionalAreaRecord>>asList(Keys.PROFESSIONAL_AREA_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProfessionalArea as(String alias) {
        return new ProfessionalArea(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfessionalArea rename(String name) {
        return new ProfessionalArea(name, null);
    }
}
