/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.BillingAddressRecord;
import ru.hh.jooq.udt.records.PhoneEmbeddedRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BillingAddress extends TableImpl<BillingAddressRecord> {

    private static final long serialVersionUID = -1069642550;

    /**
     * The reference instance of <code>public.billing_address</code>
     */
    public static final BillingAddress BILLING_ADDRESS = new BillingAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BillingAddressRecord> getRecordType() {
        return BillingAddressRecord.class;
    }

    /**
     * The column <code>public.billing_address.address_id</code>.
     */
    public final TableField<BillingAddressRecord, Integer> ADDRESS_ID = createField("address_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('billing_address_address_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.billing_address.street</code>.
     */
    public final TableField<BillingAddressRecord, String> STREET = createField("street", org.jooq.impl.SQLDataType.VARCHAR.length(128).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.billing_address.building</code>.
     */
    public final TableField<BillingAddressRecord, String> BUILDING = createField("building", org.jooq.impl.SQLDataType.VARCHAR.length(128).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.billing_address.description</code>.
     */
    public final TableField<BillingAddressRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.billing_address.country</code>.
     */
    public final TableField<BillingAddressRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR.length(128).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.billing_address.area</code>.
     */
    public final TableField<BillingAddressRecord, String> AREA = createField("area", org.jooq.impl.SQLDataType.VARCHAR.length(128).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.billing_address.city</code>.
     */
    public final TableField<BillingAddressRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR.length(128).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.billing_address.office</code>.
     */
    public final TableField<BillingAddressRecord, String> OFFICE = createField("office", org.jooq.impl.SQLDataType.VARCHAR.length(50).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.billing_address.street_prefix</code>.
     */
    public final TableField<BillingAddressRecord, Integer> STREET_PREFIX = createField("street_prefix", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.billing_address.delivery_person</code>.
     */
    public final TableField<BillingAddressRecord, String> DELIVERY_PERSON = createField("delivery_person", org.jooq.impl.SQLDataType.VARCHAR.length(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.billing_address.phone</code>.
     */
    public final TableField<BillingAddressRecord, PhoneEmbeddedRecord> PHONE = createField("phone", ru.hh.jooq.udt.PhoneEmbedded.PHONE_EMBEDDED.getDataType(), this, "");

    /**
     * Create a <code>public.billing_address</code> table reference
     */
    public BillingAddress() {
        this("billing_address", null);
    }

    /**
     * Create an aliased <code>public.billing_address</code> table reference
     */
    public BillingAddress(String alias) {
        this(alias, BILLING_ADDRESS);
    }

    private BillingAddress(String alias, Table<BillingAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private BillingAddress(String alias, Table<BillingAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BillingAddressRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BILLING_ADDRESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BillingAddressRecord> getPrimaryKey() {
        return Keys.BILLING_ADDRESS_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BillingAddressRecord>> getKeys() {
        return Arrays.<UniqueKey<BillingAddressRecord>>asList(Keys.BILLING_ADDRESS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingAddress as(String alias) {
        return new BillingAddress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BillingAddress rename(String name) {
        return new BillingAddress(name, null);
    }
}
