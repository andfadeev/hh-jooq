/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.PaymentServiceRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentService extends TableImpl<PaymentServiceRecord> {

    private static final long serialVersionUID = -742576783;

    /**
     * The reference instance of <code>public.payment_service</code>
     */
    public static final PaymentService PAYMENT_SERVICE = new PaymentService();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentServiceRecord> getRecordType() {
        return PaymentServiceRecord.class;
    }

    /**
     * The column <code>public.payment_service.payment_service_id</code>.
     */
    public final TableField<PaymentServiceRecord, Integer> PAYMENT_SERVICE_ID = createField("payment_service_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('payment_service_payment_service_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.payment_service.service_type</code>.
     */
    public final TableField<PaymentServiceRecord, String> SERVICE_TYPE = createField("service_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.payment_service.currency</code>.
     */
    public final TableField<PaymentServiceRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.CHAR.length(3).nullable(false), this, "");

    /**
     * The column <code>public.payment_service.pay_variant</code>.
     */
    public final TableField<PaymentServiceRecord, String> PAY_VARIANT = createField("pay_variant", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.payment_service.amount</code>.
     */
    public final TableField<PaymentServiceRecord, Long> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.payment_service</code> table reference
     */
    public PaymentService() {
        this("payment_service", null);
    }

    /**
     * Create an aliased <code>public.payment_service</code> table reference
     */
    public PaymentService(String alias) {
        this(alias, PAYMENT_SERVICE);
    }

    private PaymentService(String alias, Table<PaymentServiceRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentService(String alias, Table<PaymentServiceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PaymentServiceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PAYMENT_SERVICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PaymentServiceRecord> getPrimaryKey() {
        return Keys.PAYMENT_SERVICE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PaymentServiceRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentServiceRecord>>asList(Keys.PAYMENT_SERVICE_PKEY, Keys.PAYMENT_SERVICE_SERVICE_TYPE_CURRENCY_PAY_VARIANT_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PaymentServiceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PaymentServiceRecord, ?>>asList(Keys.PAYMENT_SERVICE__PAYMENT_SERVICE_CURRENCY_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PaymentService as(String alias) {
        return new PaymentService(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentService rename(String name) {
        return new PaymentService(name, null);
    }
}
