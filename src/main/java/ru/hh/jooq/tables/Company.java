/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.CompanyRecord;


/**
 * HH-37617 Create company relation for suggest and normalization
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Company extends TableImpl<CompanyRecord> {

    private static final long serialVersionUID = -1348674662;

    /**
     * The reference instance of <code>public.company</code>
     */
    public static final Company COMPANY = new Company();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRecord> getRecordType() {
        return CompanyRecord.class;
    }

    /**
     * The column <code>public.company.name</code>.
     */
    public final TableField<CompanyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.company.area_id</code>.
     */
    public final TableField<CompanyRecord, Integer> AREA_ID = createField("area_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.company.industry</code>.
     */
    public final TableField<CompanyRecord, Integer> INDUSTRY = createField("industry", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.company.url</code>.
     */
    public final TableField<CompanyRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.company.company_id</code>.
     */
    public final TableField<CompanyRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('company_company_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.company.employer_id</code>.
     */
    public final TableField<CompanyRecord, Integer> EMPLOYER_ID = createField("employer_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.company.rate</code>.
     */
    public final TableField<CompanyRecord, Integer> RATE = createField("rate", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.company</code> table reference
     */
    public Company() {
        this("company", null);
    }

    /**
     * Create an aliased <code>public.company</code> table reference
     */
    public Company(String alias) {
        this(alias, COMPANY);
    }

    private Company(String alias, Table<CompanyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Company(String alias, Table<CompanyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "HH-37617 Create company relation for suggest and normalization");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CompanyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPANY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CompanyRecord> getPrimaryKey() {
        return Keys.COMPANY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CompanyRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyRecord>>asList(Keys.COMPANY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CompanyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CompanyRecord, ?>>asList(Keys.COMPANY__COMPANY_EMPLOYER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Company as(String alias) {
        return new Company(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(String name) {
        return new Company(name, null);
    }
}
