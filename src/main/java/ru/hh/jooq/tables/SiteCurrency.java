/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.SiteCurrencyRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SiteCurrency extends TableImpl<SiteCurrencyRecord> {

    private static final long serialVersionUID = 660296374;

    /**
     * The reference instance of <code>public.site_currency</code>
     */
    public static final SiteCurrency SITE_CURRENCY = new SiteCurrency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SiteCurrencyRecord> getRecordType() {
        return SiteCurrencyRecord.class;
    }

    /**
     * The column <code>public.site_currency.site_id</code>.
     */
    public final TableField<SiteCurrencyRecord, Integer> SITE_ID = createField("site_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.site_currency.available_currency_id</code>.
     */
    public final TableField<SiteCurrencyRecord, Integer> AVAILABLE_CURRENCY_ID = createField("available_currency_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.site_currency.available_currency</code>.
     */
    public final TableField<SiteCurrencyRecord, String> AVAILABLE_CURRENCY = createField("available_currency", org.jooq.impl.SQLDataType.CHAR.length(3).nullable(false), this, "");

    /**
     * Create a <code>public.site_currency</code> table reference
     */
    public SiteCurrency() {
        this("site_currency", null);
    }

    /**
     * Create an aliased <code>public.site_currency</code> table reference
     */
    public SiteCurrency(String alias) {
        this(alias, SITE_CURRENCY);
    }

    private SiteCurrency(String alias, Table<SiteCurrencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private SiteCurrency(String alias, Table<SiteCurrencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SiteCurrencyRecord>> getKeys() {
        return Arrays.<UniqueKey<SiteCurrencyRecord>>asList(Keys.SITE_CURRENCY_SITE_ID_UNIQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SiteCurrencyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SiteCurrencyRecord, ?>>asList(Keys.SITE_CURRENCY__SITE_CURRENCY_CURRENCY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SiteCurrency as(String alias) {
        return new SiteCurrency(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SiteCurrency rename(String name) {
        return new SiteCurrency(name, null);
    }
}
