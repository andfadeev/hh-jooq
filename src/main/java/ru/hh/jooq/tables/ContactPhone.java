/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.ContactPhoneRecord;
import ru.hh.jooq.udt.records.PhoneEmbeddedRecord;


/**
 * Contact phones for sites
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContactPhone extends TableImpl<ContactPhoneRecord> {

    private static final long serialVersionUID = 840607607;

    /**
     * The reference instance of <code>public.contact_phone</code>
     */
    public static final ContactPhone CONTACT_PHONE = new ContactPhone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactPhoneRecord> getRecordType() {
        return ContactPhoneRecord.class;
    }

    /**
     * The column <code>public.contact_phone.contact_phone_id</code>.
     */
    public final TableField<ContactPhoneRecord, Integer> CONTACT_PHONE_ID = createField("contact_phone_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('contact_phone_contact_phone_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.contact_phone.site_id</code>.
     */
    public final TableField<ContactPhoneRecord, Integer> SITE_ID = createField("site_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.contact_phone.phone</code>.
     */
    public final TableField<ContactPhoneRecord, PhoneEmbeddedRecord> PHONE = createField("phone", ru.hh.jooq.udt.PhoneEmbedded.PHONE_EMBEDDED.getDataType(), this, "");

    /**
     * Create a <code>public.contact_phone</code> table reference
     */
    public ContactPhone() {
        this("contact_phone", null);
    }

    /**
     * Create an aliased <code>public.contact_phone</code> table reference
     */
    public ContactPhone(String alias) {
        this(alias, CONTACT_PHONE);
    }

    private ContactPhone(String alias, Table<ContactPhoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContactPhone(String alias, Table<ContactPhoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Contact phones for sites");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ContactPhoneRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONTACT_PHONE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ContactPhoneRecord> getPrimaryKey() {
        return Keys.CONTACT_PHONE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ContactPhoneRecord>> getKeys() {
        return Arrays.<UniqueKey<ContactPhoneRecord>>asList(Keys.CONTACT_PHONE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ContactPhoneRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ContactPhoneRecord, ?>>asList(Keys.CONTACT_PHONE__CONTACT_PHONE_TO_SITE_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContactPhone as(String alias) {
        return new ContactPhone(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactPhone rename(String name) {
        return new ContactPhone(name, null);
    }
}
