/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.TranslationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Translation extends TableImpl<TranslationRecord> {

    private static final long serialVersionUID = -520152672;

    /**
     * The reference instance of <code>public.translation</code>
     */
    public static final Translation TRANSLATION = new Translation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TranslationRecord> getRecordType() {
        return TranslationRecord.class;
    }

    /**
     * The column <code>public.translation.translation_id</code>.
     */
    public final TableField<TranslationRecord, Integer> TRANSLATION_ID = createField("translation_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('translation_translation_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.translation.name</code>.
     */
    public final TableField<TranslationRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.translation.value</code>.
     */
    public final TableField<TranslationRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.translation.site_id</code>.
     */
    public final TableField<TranslationRecord, Integer> SITE_ID = createField("site_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.translation.lang</code>.
     */
    public final TableField<TranslationRecord, String> LANG = createField("lang", org.jooq.impl.SQLDataType.VARCHAR.length(2).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.translation.dirty</code>.
     */
    public final TableField<TranslationRecord, Boolean> DIRTY = createField("dirty", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.translation.ui</code>.
     */
    public final TableField<TranslationRecord, Boolean> UI = createField("ui", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.translation</code> table reference
     */
    public Translation() {
        this("translation", null);
    }

    /**
     * Create an aliased <code>public.translation</code> table reference
     */
    public Translation(String alias) {
        this(alias, TRANSLATION);
    }

    private Translation(String alias, Table<TranslationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Translation(String alias, Table<TranslationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TranslationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRANSLATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TranslationRecord> getPrimaryKey() {
        return Keys.TRANSLATION_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TranslationRecord>> getKeys() {
        return Arrays.<UniqueKey<TranslationRecord>>asList(Keys.TRANSLATION_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TranslationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TranslationRecord, ?>>asList(Keys.TRANSLATION__SITE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Translation as(String alias) {
        return new Translation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Translation rename(String name) {
        return new Translation(name, null);
    }
}
