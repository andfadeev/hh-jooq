/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.UniversitySynonymRecord;


/**
 * HH-36259 synonyms for universities
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UniversitySynonym extends TableImpl<UniversitySynonymRecord> {

    private static final long serialVersionUID = 657075117;

    /**
     * The reference instance of <code>public.university_synonym</code>
     */
    public static final UniversitySynonym UNIVERSITY_SYNONYM = new UniversitySynonym();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UniversitySynonymRecord> getRecordType() {
        return UniversitySynonymRecord.class;
    }

    /**
     * The column <code>public.university_synonym.university_synonym_id</code>.
     */
    public final TableField<UniversitySynonymRecord, Integer> UNIVERSITY_SYNONYM_ID = createField("university_synonym_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('university_synonym_synonym_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.university_synonym.university_id</code>.
     */
    public final TableField<UniversitySynonymRecord, Integer> UNIVERSITY_ID = createField("university_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.university_synonym.rate</code>.
     */
    public final TableField<UniversitySynonymRecord, Integer> RATE = createField("rate", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.university_synonym</code> table reference
     */
    public UniversitySynonym() {
        this("university_synonym", null);
    }

    /**
     * Create an aliased <code>public.university_synonym</code> table reference
     */
    public UniversitySynonym(String alias) {
        this(alias, UNIVERSITY_SYNONYM);
    }

    private UniversitySynonym(String alias, Table<UniversitySynonymRecord> aliased) {
        this(alias, aliased, null);
    }

    private UniversitySynonym(String alias, Table<UniversitySynonymRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "HH-36259 synonyms for universities");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UniversitySynonymRecord, Integer> getIdentity() {
        return Keys.IDENTITY_UNIVERSITY_SYNONYM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UniversitySynonymRecord> getPrimaryKey() {
        return Keys.UNIVERSITY_SYNONYM_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UniversitySynonymRecord>> getKeys() {
        return Arrays.<UniqueKey<UniversitySynonymRecord>>asList(Keys.UNIVERSITY_SYNONYM_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UniversitySynonymRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UniversitySynonymRecord, ?>>asList(Keys.UNIVERSITY_SYNONYM__UNIVERSITY_SYNONYM_UNIVERSITY_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniversitySynonym as(String alias) {
        return new UniversitySynonym(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UniversitySynonym rename(String name) {
        return new UniversitySynonym(name, null);
    }
}
