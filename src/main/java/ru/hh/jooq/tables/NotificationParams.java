/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.NotificationParamsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationParams extends TableImpl<NotificationParamsRecord> {

    private static final long serialVersionUID = 1015254696;

    /**
     * The reference instance of <code>public.notification_params</code>
     */
    public static final NotificationParams NOTIFICATION_PARAMS = new NotificationParams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationParamsRecord> getRecordType() {
        return NotificationParamsRecord.class;
    }

    /**
     * The column <code>public.notification_params.notification_id</code>.
     */
    public final TableField<NotificationParamsRecord, Integer> NOTIFICATION_ID = createField("notification_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.notification_params.value</code>.
     */
    public final TableField<NotificationParamsRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.notification_params.key</code>.
     */
    public final TableField<NotificationParamsRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>public.notification_params</code> table reference
     */
    public NotificationParams() {
        this("notification_params", null);
    }

    /**
     * Create an aliased <code>public.notification_params</code> table reference
     */
    public NotificationParams(String alias) {
        this(alias, NOTIFICATION_PARAMS);
    }

    private NotificationParams(String alias, Table<NotificationParamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationParams(String alias, Table<NotificationParamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NotificationParamsRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_PARAMS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NotificationParamsRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationParamsRecord>>asList(Keys.NOTIFICATION_PARAMS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NotificationParamsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotificationParamsRecord, ?>>asList(Keys.NOTIFICATION_PARAMS__FK40EB9F5AB5D376EB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationParams as(String alias) {
        return new NotificationParams(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationParams rename(String name) {
        return new NotificationParams(name, null);
    }
}
