/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import ru.hh.jooq.tables.BatchProcessingItem;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchProcessingItemRecord extends UpdatableRecordImpl<BatchProcessingItemRecord> implements Record5<Integer, String, Integer, String, String> {

    private static final long serialVersionUID = 514789012;

    /**
     * Setter for <code>public.batch_processing_item.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.batch_processing_item.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.batch_processing_item.task_id</code>.
     */
    public void setTaskId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.batch_processing_item.task_id</code>.
     */
    public String getTaskId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.batch_processing_item.item_id</code>.
     */
    public void setItemId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.batch_processing_item.item_id</code>.
     */
    public Integer getItemId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.batch_processing_item.result</code>.
     */
    public void setResult(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.batch_processing_item.result</code>.
     */
    public String getResult() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.batch_processing_item.error</code>.
     */
    public void setError(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.batch_processing_item.error</code>.
     */
    public String getError() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, String, Integer, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, String, Integer, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return BatchProcessingItem.BATCH_PROCESSING_ITEM.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return BatchProcessingItem.BATCH_PROCESSING_ITEM.TASK_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return BatchProcessingItem.BATCH_PROCESSING_ITEM.ITEM_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return BatchProcessingItem.BATCH_PROCESSING_ITEM.RESULT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return BatchProcessingItem.BATCH_PROCESSING_ITEM.ERROR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTaskId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getItemId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getResult();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getError();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchProcessingItemRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchProcessingItemRecord value2(String value) {
        setTaskId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchProcessingItemRecord value3(Integer value) {
        setItemId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchProcessingItemRecord value4(String value) {
        setResult(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchProcessingItemRecord value5(String value) {
        setError(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchProcessingItemRecord values(Integer value1, String value2, Integer value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BatchProcessingItemRecord
     */
    public BatchProcessingItemRecord() {
        super(BatchProcessingItem.BATCH_PROCESSING_ITEM);
    }

    /**
     * Create a detached, initialised BatchProcessingItemRecord
     */
    public BatchProcessingItemRecord(Integer id, String taskId, Integer itemId, String result, String error) {
        super(BatchProcessingItem.BATCH_PROCESSING_ITEM);

        set(0, id);
        set(1, taskId);
        set(2, itemId);
        set(3, result);
        set(4, error);
    }
}
