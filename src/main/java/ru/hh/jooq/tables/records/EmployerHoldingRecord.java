/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import ru.hh.jooq.tables.EmployerHolding;


/**
 * Список работодателей, входящих в холдинг. Перенесено из схемы hhservice.hhemployer 
 * по задаче HH-38267
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployerHoldingRecord extends UpdatableRecordImpl<EmployerHoldingRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = -109656002;

    /**
     * Setter for <code>public.employer_holding.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.employer_holding.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.employer_holding.holding_code</code>.
     */
    public void setHoldingCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.employer_holding.holding_code</code>.
     */
    public String getHoldingCode() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return EmployerHolding.EMPLOYER_HOLDING.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return EmployerHolding.EMPLOYER_HOLDING.HOLDING_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getHoldingCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployerHoldingRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployerHoldingRecord value2(String value) {
        setHoldingCode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployerHoldingRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EmployerHoldingRecord
     */
    public EmployerHoldingRecord() {
        super(EmployerHolding.EMPLOYER_HOLDING);
    }

    /**
     * Create a detached, initialised EmployerHoldingRecord
     */
    public EmployerHoldingRecord(Integer id, String holdingCode) {
        super(EmployerHolding.EMPLOYER_HOLDING);

        set(0, id);
        set(1, holdingCode);
    }
}
