/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.hh.jooq.tables.NotificationCondition;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationConditionRecord extends UpdatableRecordImpl<NotificationConditionRecord> implements Record3<Integer, Integer, String> {

    private static final long serialVersionUID = -482601877;

    /**
     * Setter for <code>public.notification_condition.minimum</code>.
     */
    public void setMinimum(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.notification_condition.minimum</code>.
     */
    public Integer getMinimum() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.notification_condition.account_id</code>.
     */
    public void setAccountId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.notification_condition.account_id</code>.
     */
    public Integer getAccountId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.notification_condition.service_entry</code>.
     */
    public void setServiceEntry(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.notification_condition.service_entry</code>.
     */
    public String getServiceEntry() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<Integer, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, Integer, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return NotificationCondition.NOTIFICATION_CONDITION.MINIMUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return NotificationCondition.NOTIFICATION_CONDITION.ACCOUNT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return NotificationCondition.NOTIFICATION_CONDITION.SERVICE_ENTRY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getMinimum();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getAccountId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getServiceEntry();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationConditionRecord value1(Integer value) {
        setMinimum(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationConditionRecord value2(Integer value) {
        setAccountId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationConditionRecord value3(String value) {
        setServiceEntry(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationConditionRecord values(Integer value1, Integer value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotificationConditionRecord
     */
    public NotificationConditionRecord() {
        super(NotificationCondition.NOTIFICATION_CONDITION);
    }

    /**
     * Create a detached, initialised NotificationConditionRecord
     */
    public NotificationConditionRecord(Integer minimum, Integer accountId, String serviceEntry) {
        super(NotificationCondition.NOTIFICATION_CONDITION);

        set(0, minimum);
        set(1, accountId);
        set(2, serviceEntry);
    }
}
