/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import ru.hh.jooq.tables.Classification;


/**
 * Типы классификации вакансий. Перенесено из схемы hhservice.hhemployer по 
 * задаче HH-38267
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClassificationRecord extends UpdatableRecordImpl<ClassificationRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1838624549;

    /**
     * Setter for <code>public.classification.grouping_type</code>.
     */
    public void setGroupingType(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.classification.grouping_type</code>.
     */
    public String getGroupingType() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.classification.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.classification.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Classification.CLASSIFICATION.GROUPING_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Classification.CLASSIFICATION.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getGroupingType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClassificationRecord value1(String value) {
        setGroupingType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClassificationRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClassificationRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClassificationRecord
     */
    public ClassificationRecord() {
        super(Classification.CLASSIFICATION);
    }

    /**
     * Create a detached, initialised ClassificationRecord
     */
    public ClassificationRecord(String groupingType, String name) {
        super(Classification.CLASSIFICATION);

        set(0, groupingType);
        set(1, name);
    }
}
