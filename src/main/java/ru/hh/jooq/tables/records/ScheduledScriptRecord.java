/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables.records;


import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import ru.hh.jooq.tables.ScheduledScript;


/**
 * SQL scripts to be executed by ScheduledScriptExecutor crontab
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScheduledScriptRecord extends UpdatableRecordImpl<ScheduledScriptRecord> implements Record5<Integer, String, LocalDateTime, Boolean, String> {

    private static final long serialVersionUID = 2115497869;

    /**
     * Setter for <code>public.scheduled_script.scheduled_script_id</code>.
     */
    public void setScheduledScriptId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.scheduled_script.scheduled_script_id</code>.
     */
    public Integer getScheduledScriptId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.scheduled_script.script_path</code>.
     */
    public void setScriptPath(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.scheduled_script.script_path</code>.
     */
    public String getScriptPath() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.scheduled_script.scheduled_at</code>.
     */
    public void setScheduledAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.scheduled_script.scheduled_at</code>.
     */
    public LocalDateTime getScheduledAt() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.scheduled_script.was_executed</code>.
     */
    public void setWasExecuted(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.scheduled_script.was_executed</code>.
     */
    public Boolean getWasExecuted() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.scheduled_script.errors</code>.
     */
    public void setErrors(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.scheduled_script.errors</code>.
     */
    public String getErrors() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, String, LocalDateTime, Boolean, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, String, LocalDateTime, Boolean, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return ScheduledScript.SCHEDULED_SCRIPT.SCHEDULED_SCRIPT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return ScheduledScript.SCHEDULED_SCRIPT.SCRIPT_PATH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field3() {
        return ScheduledScript.SCHEDULED_SCRIPT.SCHEDULED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field4() {
        return ScheduledScript.SCHEDULED_SCRIPT.WAS_EXECUTED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return ScheduledScript.SCHEDULED_SCRIPT.ERRORS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getScheduledScriptId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getScriptPath();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value3() {
        return getScheduledAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value4() {
        return getWasExecuted();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getErrors();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledScriptRecord value1(Integer value) {
        setScheduledScriptId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledScriptRecord value2(String value) {
        setScriptPath(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledScriptRecord value3(LocalDateTime value) {
        setScheduledAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledScriptRecord value4(Boolean value) {
        setWasExecuted(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledScriptRecord value5(String value) {
        setErrors(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledScriptRecord values(Integer value1, String value2, LocalDateTime value3, Boolean value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ScheduledScriptRecord
     */
    public ScheduledScriptRecord() {
        super(ScheduledScript.SCHEDULED_SCRIPT);
    }

    /**
     * Create a detached, initialised ScheduledScriptRecord
     */
    public ScheduledScriptRecord(Integer scheduledScriptId, String scriptPath, LocalDateTime scheduledAt, Boolean wasExecuted, String errors) {
        super(ScheduledScript.SCHEDULED_SCRIPT);

        set(0, scheduledScriptId);
        set(1, scriptPath);
        set(2, scheduledAt);
        set(3, wasExecuted);
        set(4, errors);
    }
}
