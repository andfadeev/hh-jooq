/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import ru.hh.jooq.tables.CommonTestCategory;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonTestCategoryRecord extends UpdatableRecordImpl<CommonTestCategoryRecord> implements Record4<Integer, String, Integer, Integer> {

    private static final long serialVersionUID = 1811490254;

    /**
     * Setter for <code>public.common_test_category.common_test_category_id</code>.
     */
    public void setCommonTestCategoryId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.common_test_category.common_test_category_id</code>.
     */
    public Integer getCommonTestCategoryId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.common_test_category.category_name</code>.
     */
    public void setCategoryName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.common_test_category.category_name</code>.
     */
    public String getCategoryName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.common_test_category.parent_id</code>.
     */
    public void setParentId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.common_test_category.parent_id</code>.
     */
    public Integer getParentId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.common_test_category.sort_order</code>.
     */
    public void setSortOrder(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.common_test_category.sort_order</code>.
     */
    public Integer getSortOrder() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return CommonTestCategory.COMMON_TEST_CATEGORY.COMMON_TEST_CATEGORY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return CommonTestCategory.COMMON_TEST_CATEGORY.CATEGORY_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return CommonTestCategory.COMMON_TEST_CATEGORY.PARENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return CommonTestCategory.COMMON_TEST_CATEGORY.SORT_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getCommonTestCategoryId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getCategoryName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getParentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getSortOrder();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonTestCategoryRecord value1(Integer value) {
        setCommonTestCategoryId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonTestCategoryRecord value2(String value) {
        setCategoryName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonTestCategoryRecord value3(Integer value) {
        setParentId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonTestCategoryRecord value4(Integer value) {
        setSortOrder(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonTestCategoryRecord values(Integer value1, String value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommonTestCategoryRecord
     */
    public CommonTestCategoryRecord() {
        super(CommonTestCategory.COMMON_TEST_CATEGORY);
    }

    /**
     * Create a detached, initialised CommonTestCategoryRecord
     */
    public CommonTestCategoryRecord(Integer commonTestCategoryId, String categoryName, Integer parentId, Integer sortOrder) {
        super(CommonTestCategory.COMMON_TEST_CATEGORY);

        set(0, commonTestCategoryId);
        set(1, categoryName);
        set(2, parentId);
        set(3, sortOrder);
    }
}
