/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.hh.jooq.tables.Holding;


/**
 * Холдинги, состоящие из одного или нескольких работодателей. Перенесено 
 * из схемы hhservice.hhemployer по задаче HH-38267
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HoldingRecord extends UpdatableRecordImpl<HoldingRecord> implements Record3<String, Boolean, Boolean> {

    private static final long serialVersionUID = 1818004596;

    /**
     * Setter for <code>public.holding.code</code>.
     */
    public void setCode(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.holding.code</code>.
     */
    public String getCode() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.holding.region_mapping</code>.
     */
    public void setRegionMapping(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.holding.region_mapping</code>.
     */
    public Boolean getRegionMapping() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>public.holding.department_mapping</code>.
     */
    public void setDepartmentMapping(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.holding.department_mapping</code>.
     */
    public Boolean getDepartmentMapping() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, Boolean, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, Boolean, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Holding.HOLDING.CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field2() {
        return Holding.HOLDING.REGION_MAPPING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field3() {
        return Holding.HOLDING.DEPARTMENT_MAPPING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value2() {
        return getRegionMapping();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value3() {
        return getDepartmentMapping();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HoldingRecord value1(String value) {
        setCode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HoldingRecord value2(Boolean value) {
        setRegionMapping(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HoldingRecord value3(Boolean value) {
        setDepartmentMapping(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HoldingRecord values(String value1, Boolean value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HoldingRecord
     */
    public HoldingRecord() {
        super(Holding.HOLDING);
    }

    /**
     * Create a detached, initialised HoldingRecord
     */
    public HoldingRecord(String code, Boolean regionMapping, Boolean departmentMapping) {
        super(Holding.HOLDING);

        set(0, code);
        set(1, regionMapping);
        set(2, departmentMapping);
    }
}
