/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import ru.hh.jooq.tables.ServiceTicket;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceTicketRecord extends UpdatableRecordImpl<ServiceTicketRecord> implements Record5<Long, Integer, Integer, Boolean, Short> {

    private static final long serialVersionUID = -125596321;

    /**
     * Setter for <code>public.service_ticket.uid</code>.
     */
    public void setUid(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.service_ticket.uid</code>.
     */
    public Long getUid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.service_ticket.service_item_id</code>.
     */
    public void setServiceItemId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.service_ticket.service_item_id</code>.
     */
    public Integer getServiceItemId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.service_ticket.version_</code>.
     */
    public void setVersion_(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.service_ticket.version_</code>.
     */
    public Integer getVersion_() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.service_ticket.used</code>.
     */
    public void setUsed(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.service_ticket.used</code>.
     */
    public Boolean getUsed() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.service_ticket.state</code>.
     */
    public void setState(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.service_ticket.state</code>.
     */
    public Short getState() {
        return (Short) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Long, Integer, Integer, Boolean, Short> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Long, Integer, Integer, Boolean, Short> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return ServiceTicket.SERVICE_TICKET.UID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return ServiceTicket.SERVICE_TICKET.SERVICE_ITEM_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return ServiceTicket.SERVICE_TICKET.VERSION_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field4() {
        return ServiceTicket.SERVICE_TICKET.USED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field5() {
        return ServiceTicket.SERVICE_TICKET.STATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getUid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getServiceItemId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getVersion_();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value4() {
        return getUsed();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value5() {
        return getState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceTicketRecord value1(Long value) {
        setUid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceTicketRecord value2(Integer value) {
        setServiceItemId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceTicketRecord value3(Integer value) {
        setVersion_(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceTicketRecord value4(Boolean value) {
        setUsed(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceTicketRecord value5(Short value) {
        setState(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceTicketRecord values(Long value1, Integer value2, Integer value3, Boolean value4, Short value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ServiceTicketRecord
     */
    public ServiceTicketRecord() {
        super(ServiceTicket.SERVICE_TICKET);
    }

    /**
     * Create a detached, initialised ServiceTicketRecord
     */
    public ServiceTicketRecord(Long uid, Integer serviceItemId, Integer version_, Boolean used, Short state) {
        super(ServiceTicket.SERVICE_TICKET);

        set(0, uid);
        set(1, serviceItemId);
        set(2, version_);
        set(3, used);
        set(4, state);
    }
}
