/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.BankSellerAccountDetailRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankSellerAccountDetail extends TableImpl<BankSellerAccountDetailRecord> {

    private static final long serialVersionUID = -1203267805;

    /**
     * The reference instance of <code>public.bank_seller_account_detail</code>
     */
    public static final BankSellerAccountDetail BANK_SELLER_ACCOUNT_DETAIL = new BankSellerAccountDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankSellerAccountDetailRecord> getRecordType() {
        return BankSellerAccountDetailRecord.class;
    }

    /**
     * The column <code>public.bank_seller_account_detail.bank_seller_account_detail_id</code>.
     */
    public final TableField<BankSellerAccountDetailRecord, Integer> BANK_SELLER_ACCOUNT_DETAIL_ID = createField("bank_seller_account_detail_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('bank_seller_account_detail_bank_seller_account_detail_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.bank_seller_account_detail.bank_id</code>.
     */
    public final TableField<BankSellerAccountDetailRecord, Integer> BANK_ID = createField("bank_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.bank_seller_account_detail.seller_account_id</code>.
     */
    public final TableField<BankSellerAccountDetailRecord, Integer> SELLER_ACCOUNT_ID = createField("seller_account_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.bank_seller_account_detail.bank_detail_id</code>.
     */
    public final TableField<BankSellerAccountDetailRecord, Integer> BANK_DETAIL_ID = createField("bank_detail_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.bank_seller_account_detail.view_order</code>.
     */
    public final TableField<BankSellerAccountDetailRecord, Integer> VIEW_ORDER = createField("view_order", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.bank_seller_account_detail</code> table reference
     */
    public BankSellerAccountDetail() {
        this("bank_seller_account_detail", null);
    }

    /**
     * Create an aliased <code>public.bank_seller_account_detail</code> table reference
     */
    public BankSellerAccountDetail(String alias) {
        this(alias, BANK_SELLER_ACCOUNT_DETAIL);
    }

    private BankSellerAccountDetail(String alias, Table<BankSellerAccountDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankSellerAccountDetail(String alias, Table<BankSellerAccountDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BankSellerAccountDetailRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BANK_SELLER_ACCOUNT_DETAIL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BankSellerAccountDetailRecord> getPrimaryKey() {
        return Keys.BANK_SELLER_ACCOUNT_DETAIL_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BankSellerAccountDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<BankSellerAccountDetailRecord>>asList(Keys.BANK_SELLER_ACCOUNT_DETAIL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BankSellerAccountDetailRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BankSellerAccountDetailRecord, ?>>asList(Keys.BANK_SELLER_ACCOUNT_DETAIL__BANK_SELLER_ACCOUNT_DETAIL_BANK_ID_FKEY, Keys.BANK_SELLER_ACCOUNT_DETAIL__BANK_SELLER_ACCOUNT_DETAIL_SELLER_ACCOUNT_ID_FKEY, Keys.BANK_SELLER_ACCOUNT_DETAIL__BANK_SELLER_ACCOUNT_DETAIL_BANK_DETAIL_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankSellerAccountDetail as(String alias) {
        return new BankSellerAccountDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankSellerAccountDetail rename(String name) {
        return new BankSellerAccountDetail(name, null);
    }
}
