/*
 * This file is generated by jOOQ.
*/
package ru.hh.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.hh.jooq.Keys;
import ru.hh.jooq.Public;
import ru.hh.jooq.tables.records.SellerAccountRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SellerAccount extends TableImpl<SellerAccountRecord> {

    private static final long serialVersionUID = -79604092;

    /**
     * The reference instance of <code>public.seller_account</code>
     */
    public static final SellerAccount SELLER_ACCOUNT = new SellerAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SellerAccountRecord> getRecordType() {
        return SellerAccountRecord.class;
    }

    /**
     * The column <code>public.seller_account.seller_account_id</code>.
     */
    public final TableField<SellerAccountRecord, Integer> SELLER_ACCOUNT_ID = createField("seller_account_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('seller_account_seller_account_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.seller_account.name</code>.
     */
    public final TableField<SellerAccountRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(128).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.seller_account.vat</code>.
     */
    public final TableField<SellerAccountRecord, Integer> VAT = createField("vat", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.seller_account.white_buh</code>.
     */
    public final TableField<SellerAccountRecord, Boolean> WHITE_BUH = createField("white_buh", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.seller_account.seller_id</code>.
     */
    public final TableField<SellerAccountRecord, Integer> SELLER_ID = createField("seller_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.seller_account.currency</code>.
     */
    public final TableField<SellerAccountRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.CHAR.length(3).nullable(false), this, "");

    /**
     * The column <code>public.seller_account.price_region_id</code>.
     */
    public final TableField<SellerAccountRecord, Integer> PRICE_REGION_ID = createField("price_region_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.seller_account.exchange_rate</code>. unused
     */
    public final TableField<SellerAccountRecord, BigDecimal> EXCHANGE_RATE = createField("exchange_rate", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 7), this, "unused");

    /**
     * The column <code>public.seller_account.vat_enabled</code>.
     */
    public final TableField<SellerAccountRecord, Boolean> VAT_ENABLED = createField("vat_enabled", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.seller_account</code> table reference
     */
    public SellerAccount() {
        this("seller_account", null);
    }

    /**
     * Create an aliased <code>public.seller_account</code> table reference
     */
    public SellerAccount(String alias) {
        this(alias, SELLER_ACCOUNT);
    }

    private SellerAccount(String alias, Table<SellerAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private SellerAccount(String alias, Table<SellerAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SellerAccountRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SELLER_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SellerAccountRecord> getPrimaryKey() {
        return Keys.SELLER_ACCOUNT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SellerAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<SellerAccountRecord>>asList(Keys.SELLER_ACCOUNT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SellerAccountRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SellerAccountRecord, ?>>asList(Keys.SELLER_ACCOUNT__SELLER_ID_FKEY, Keys.SELLER_ACCOUNT__SELLER_ACCOUNT_CURRENCY, Keys.SELLER_ACCOUNT__PRICE_REGION_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SellerAccount as(String alias) {
        return new SellerAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SellerAccount rename(String name) {
        return new SellerAccount(name, null);
    }
}
